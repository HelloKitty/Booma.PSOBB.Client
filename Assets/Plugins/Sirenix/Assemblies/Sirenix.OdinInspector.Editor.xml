<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sirenix.OdinInspector.Editor</name>
    </assembly>
    <members>
        <member name="T:Sirenix.Serialization.AOTGenerationConfig">
            <summary>
            Contains configuration for generating an assembly that provides increased AOT support in Odin.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.ColorPaletteManager">
            <summary>
            <para>Add, Edit or remove custom color palettes used by the <see cref="T:Sirenix.OdinInspector.ColorPaletteAttribute"/>.</para>
            <para>
            You can modify the configuration in the Odin Preferences window found in 'Tools -> Odin Inspector -> Preferences -> Drawers -> Color Palettes',
            or by locating the configuration file stored as a serialized object in the Sirenix folder under 'Odin Inspector/Config/Editor/ColorPaletteManager'.
            </para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.ColorPaletteManager.SwatchSpacing">
            <summary>
            Specify the amount of spacing between each color in a color palette.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.ColorPaletteManager.SwatchSize">
            <summary>
            Specify the width of each color in a color palette. If StretchPalette is set to true, this will become the min-width.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.ColorPaletteManager.StretchPalette">
            <summary>
            If true, all color in a color palette is stretch so that the entire color-palette area is filled.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.ColorPaletteManager.ShowPaletteName">
            <summary>
            If true, a toolbar with the name of the color palette is shown above each color palette.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityEditorEventUtility.DelayAction(System.Action)">
            <summary>
            Sometimes, an idiot overrides a delay action subscription to <see cref="F:UnityEditor.EditorApplication.delayCall"/>,
            which can be done because the people at Unity didn't know what events were once upon a time.
            This method subscribes to a lot of different callbacks, in the hopes of catching at least one.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.TextAreaAttributeDrawer">
            <summary>
            TextArea attribute drawer.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.Drawers.TextAreaAttributeDrawer.GUICallType">
            <summary>
            Drawing properties using GUICallType.GUILayout and overriding DrawPropertyLayout is the default behavior.
            But you can also draw the property the "good" old Unity way, by overriding and implementing
            GetRectHeight and DrawPropertyRect. Just make sure to override GUICallType as well and return GUICallType.Rect
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TextAreaAttributeDrawer.DrawPropertyRect(UnityEngine.Rect,Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.String},UnityEngine.TextAreaAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property in the Rect provided. This method does not support the GUILayout, and is only called by DrawPropertyImplementation if the GUICallType is set to Rect, which is not the default.
            If the GUICallType is set to Rect, both GetRectHeight and DrawPropertyRect needs to be implemented.
            If the GUICallType is set to GUILayout, implementing DrawPropertyLayout will suffice.
            </summary>
            <param name="position">The position.</param>
            <param name="entry">The value entry.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.TableListAttributeDrawer">
            <summary>
            Attribute drawer for the TableList attribute
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.TableListAttribute" />
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TableListAttributeDrawer.CanDrawTypeFilter(System.Type)">
            <summary>
            <para>Only draw for IList&lt;&gt; types.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TableListAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.TableListAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ColorUsageAttributeDrawer">
            <summary>
            Draws Color properties marked with <see cref="T:UnityEngine.ColorUsageAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ColorUsageAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Color},UnityEngine.ColorUsageAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.CustomValueDrawerAttributeDrawer`1">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.CustomValueDrawerAttributeDrawer`1.CanDrawTypeFilter(System.Type)">
            <summary>
            Excludes functionality for lists and instead works on the list elements.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.CustomValueDrawerAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.CustomValueDrawerAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DisableInInlineEditorsAttributeDrawer">
            <summary>
            Draws all properties marked with the <see cref="T:Sirenix.OdinInspector.DisableInInlineEditorsAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DisableInInlineEditorsAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.DisableInInlineEditorsAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DisableInNonPrefabsAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.DisableInNonPrefabsAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DisableInNonPrefabsAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.DisableInNonPrefabsAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DisableInPrefabAssetsAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.DisableInPrefabAssetsAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DisableInPrefabAssetsAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.DisableInPrefabAssetsAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DisableInPrefabInstancesAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.DisableInPrefabInstancesAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DisableInPrefabInstancesAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.DisableInPrefabInstancesAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DisableInPrefabsAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.DisableInPrefabsAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DisableInPrefabsAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.DisableInPrefabsAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.FilePathAttributeDrawer">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.FilePathAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.String},Sirenix.OdinInspector.FilePathAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.FilePathAttributeDrawer.ProcessExtensions(System.String)">
            <summary>
            EditorUtility.OpenFilePanel's extension parameter is a bit sensitive to formatting.
            This methods processes whatever the user inputs as extensions, to make it easier for the user.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.FolderPathAttributeDrawer">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.FolderPathAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.String},Sirenix.OdinInspector.FolderPathAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.FolderPathAttributeDrawer.PopulateGenericMenu(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEditor.GenericMenu)">
            <summary>
            Adds customs generic menu options.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HideInInlineEditorsAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.HideInInlineEditorsAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HideInInlineEditorsAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.HideInInlineEditorsAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HideInNonPrefabsAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.HideInNonPrefabsAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HideInNonPrefabsAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.HideInNonPrefabsAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HideInPrefabAssetsAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.HideInPrefabAssetsAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HideInPrefabAssetsAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.HideInPrefabAssetsAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HideInPrefabInstancesAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.HideInPrefabInstancesAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HideInPrefabInstancesAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.HideInPrefabInstancesAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HideInPrefabsAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.HideInPrefabsAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.HideIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInEditorModeAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HideInPrefabsAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.HideInPrefabsAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.InlineButtonAttributeDrawer`1">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.InlineButtonAttribute"/>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.InlineButtonAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.InlineButtonAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.LabelWidthAttributeDrawer">
            <summary>
            Draws properties marked with the <see cref="T:Sirenix.OdinInspector.LabelWidthAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.LabelTextAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideLabelAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.LabelWidthAttribute"/>
            <seealso cref="T:UnityEngine.TooltipAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.TitleAttribute"/>
            <seealso cref="T:UnityEngine.HeaderAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.GUIColorAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.LabelWidthAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.LabelWidthAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the attribute.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.OdinSerializeAttributeWarningDrawer">
            <summary>
            <para>
            When first learning to use the Odin Inspector, it is common for people to misunderstand the OdinSerialize attribute,
            and use it in places where it does not achive the deceired goal.
            </para>
            <para>
            This drawer will display a warning message if the OdinSerialize attribute is potentially used in such cases.
            </para>
            </summary>
            <seealso cref="!:Sirenix.OdinInspector.Editor.OdinAttributeDrawer&lt;Sirenix.Serialization.OdinSerializeAttribute&gt;" />
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.OdinSerializeAttributeWarningDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.Serialization.OdinSerializeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws The Property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeByteDrawer">
            <summary>
            Draws values decorated with <see cref="T:Sirenix.OdinInspector.ProgressBarAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeByteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Byte},Sirenix.OdinInspector.ProgressBarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeSbyteDrawer">
            <summary>
            Draws values decorated with <see cref="T:Sirenix.OdinInspector.ProgressBarAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeSbyteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.SByte},Sirenix.OdinInspector.ProgressBarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeShortDrawer">
            <summary>
            Draws values decorated with <see cref="T:Sirenix.OdinInspector.ProgressBarAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeShortDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int16},Sirenix.OdinInspector.ProgressBarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeUshortDrawer">
            <summary>
            Draws values decorated with <see cref="T:Sirenix.OdinInspector.ProgressBarAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeUshortDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt16},Sirenix.OdinInspector.ProgressBarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeInt32Drawer">
            <summary>
            Draws values decorated with <see cref="T:Sirenix.OdinInspector.ProgressBarAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeInt32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int32},Sirenix.OdinInspector.ProgressBarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeUintDrawer">
            <summary>
            Draws values decorated with <see cref="T:Sirenix.OdinInspector.ProgressBarAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeUintDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt32},Sirenix.OdinInspector.ProgressBarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeLongDrawer">
            <summary>
            Draws values decorated with <see cref="T:Sirenix.OdinInspector.ProgressBarAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeLongDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int64},Sirenix.OdinInspector.ProgressBarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeUlongDrawer">
            <summary>
            Draws values decorated with <see cref="T:Sirenix.OdinInspector.ProgressBarAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeUlongDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt64},Sirenix.OdinInspector.ProgressBarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeFloatDrawer">
            <summary>
            Draws values decorated with <see cref="T:Sirenix.OdinInspector.ProgressBarAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeFloatDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Single},Sirenix.OdinInspector.ProgressBarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeDoubleDrawer">
            <summary>
            Draws values decorated with <see cref="T:Sirenix.OdinInspector.ProgressBarAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeDoubleDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Double},Sirenix.OdinInspector.ProgressBarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeDecimalDrawer">
            <summary>
            Draws values decorated with <see cref="T:Sirenix.OdinInspector.ProgressBarAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ProgressBarAttributeDecimalDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Decimal},Sirenix.OdinInspector.ProgressBarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeByteDrawer">
            <summary>
            Draws byte properties marked with <see cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeByteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Byte},Sirenix.OdinInspector.PropertyRangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeDoubleDrawer">
            <summary>
            Draws double properties marked with <see cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeDoubleDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Double},Sirenix.OdinInspector.PropertyRangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeFloatDrawer">
            <summary>
            Draws float properties marked with <see cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeFloatDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Single},Sirenix.OdinInspector.PropertyRangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeDecimalDrawer">
            <summary>
            Draws decimal properties marked with <see cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeDecimalDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Decimal},Sirenix.OdinInspector.PropertyRangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeInt16Drawer">
            <summary>
            Draws short properties marked with <see cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeInt16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int16},Sirenix.OdinInspector.PropertyRangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeInt32Drawer">
            <summary>
            Draws int properties marked with <see cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeInt32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int32},Sirenix.OdinInspector.PropertyRangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeInt64Drawer">
            <summary>
            Draws long properties marked with <see cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeInt64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int64},Sirenix.OdinInspector.PropertyRangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeSByteDrawer">
            <summary>
            Draws sbyte properties marked with <see cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeSByteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.SByte},Sirenix.OdinInspector.PropertyRangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeUInt16Drawer">
            <summary>
            Draws ushort properties marked with <see cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeUInt16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt16},Sirenix.OdinInspector.PropertyRangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeUInt32Drawer">
            <summary>
            Draws uint properties marked with <see cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeUInt32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt32},Sirenix.OdinInspector.PropertyRangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeUInt64Drawer">
            <summary>
            Draws ulong properties marked with <see cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyRangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyRangeAttributeUInt64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt64},Sirenix.OdinInspector.PropertyRangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.EnumToggleButtonsAttributeDrawer`1">
            <summary>
            Draws an enum in a horizontal button group instead of a dropdown.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.EnumToggleButtonsAttributeDrawer`1.CanDrawTypeFilter(System.Type)">
            <summary>
            Returns <c>true</c> if the drawer can draw the type.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.EnumToggleButtonsAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.EnumToggleButtonsAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.AssetListAttributeOnSingleObjectDrawer`1">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.AssetListAttributeOnSingleObjectDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.AssetListAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeCharDrawer">
            <summary>
            Draws char properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeCharDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Char},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeStringDrawer">
            <summary>
            Draws string properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeStringDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.String},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeSByteDrawer">
            <summary>
            Draws sbyte properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeSByteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.SByte},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeByteDrawer">
            <summary>
            Draws byte properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeByteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Byte},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeInt16Drawer">
            <summary>
            Draws short properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeInt16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int16},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeUInt16Drawer">
            <summary>
            Draws ushort properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeUInt16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt16},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeInt32Drawer">
            <summary>
            Draws int properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeInt32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int32},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeUInt32Drawer">
            <summary>
            Draws uint properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeUInt32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt32},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeInt64Drawer">
            <summary>
            Draws long properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeInt64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int64},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeUInt64Drawer">
            <summary>
            Draws ulong properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeUInt64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt64},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeFloatDrawer">
            <summary>
            Draws float properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeFloatDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Single},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeDoubleDrawer">
            <summary>
            Draws double properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeDoubleDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Double},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeDecimalDrawer">
            <summary>
            Draws decimal properties marked with <see cref="T:UnityEngine.DelayedAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelayedAttributeDecimalDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Decimal},UnityEngine.DelayedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DetailedInfoBoxAttributeDrawer`1">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.DetailedInfoBoxAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.DetailedInfoBoxAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.InfoBoxAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.RequiredAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.OnInspectorGUIAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DetailedInfoBoxAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.DetailedInfoBoxAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DisableIfAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInEditorModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DisableIfAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.DisableIfAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DisableInEditorModeAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.DisableInEditorModeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInEditorModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideInEditorModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideInPlayModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DisableInEditorModeAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.DisableInEditorModeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DisableInPlayModeAttributeDrawer">
            <summary>
            Draws properties marked with <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInEditorModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DisableInPlayModeAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.DisableInPlayModeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.GUIColorAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.GUIColorAttribute"/>.
            This drawer sets the current GUI color, before calling the next drawer in the chain.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.GUIColorAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.LabelTextAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.TitleAttribute"/>
            <seealso cref="T:UnityEngine.HeaderAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ColorPaletteAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.GUIColorAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.GUIColorAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HideInPlayModeAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.HideInPlayModeAttribute"/>
            </summary>
            <seealso cref="T:UnityEngine.HideInInspector"/>
            <seealso cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ReadOnlyAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInEditorModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HideInPlayModeAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.HideInPlayModeAttribute,UnityEngine.GUIContent)">
            <summary>
            Does not call the next drawer, when the editor is in play mode.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HideInInspectorAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:UnityEngine.HideInInspector"/>
            </summary>
            <seealso cref="T:UnityEngine.HideInInspector"/>
            <seealso cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ReadOnlyAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInEditorModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HideInInspectorAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.HideInInspector,UnityEngine.GUIContent)">
            <summary>
            Does not draw the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.InlineEditorAttributeDrawer">
            <summary>
            Static GUI information reguarding the InlineEditor attribute.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.Drawers.InlineEditorAttributeDrawer.CurrentInlineEditorDrawDepth">
            <summary>
            Gets a value indicating how many InlineEditors we are currently in.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.InlineEditorAttributeDrawer`1">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.InlineEditorAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.InlineEditorAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DrawWithUnityAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.InlineEditorAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.InlineEditorAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinMaxSliderAttributeDrawer">
            <summary>
            Draws Vector2 properties marked with <see cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinMaxSliderAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector2},Sirenix.OdinInspector.MinMaxSliderAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ShowDrawerChainAttributeDrawer">
            <summary>
            Show drawer chain attribute drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ShowDrawerChainAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.ShowDrawerChainAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HideIfAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HideIfAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.HideIfAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.SpaceAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:UnityEngine.SpaceAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.SpaceAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.SpaceAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.SpaceAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.SuffixLabelAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.SuffixLabelAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.LabelTextAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.PropertyTooltipAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.InlineButtonAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.CustomValueDrawerAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.SuffixLabelAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.SuffixLabelAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ToggleLeftAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.ToggleLeftAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.ToggleLeftAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ToggleLeftAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Boolean},Sirenix.OdinInspector.ToggleLeftAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeByteDrawer">
            <summary>
            Draws byte properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeByteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Byte},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeDoubleDrawer">
            <summary>
            Draws double properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeDoubleDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Double},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeUint64Drawer">
            <summary>
            Draws ulong properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeUint64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt64},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeUint32Drawer">
            <summary>
            Draws uint properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeUint32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt32},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeUint16Drawer">
            <summary>
            Draws ushort properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeUint16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt16},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeSbyteDrawer">
            <summary>
            Draws sbyte properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeSbyteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.SByte},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeInt64Drawer">
            <summary>
            Draws long properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeInt64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int64},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeInt32Drawer">
            <summary>
            Draws int properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeInt32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int32},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeInt16Drawer">
            <summary>
            Draws short properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeInt16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int16},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeFloatDrawer">
            <summary>
            Draws float properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeFloatDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Single},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeVector2Drawer">
            <summary>
            Draws Vector2 properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeVector2Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector2},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeVector3Drawer">
            <summary>
            Draws Vector3 properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeVector3Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector3},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeVector4Drawer">
            <summary>
            Draws Vector4 properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeVector4Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector4},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeDecimalDrawer">
            <summary>
            Draws decimal properties marked with <see cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MaxValueAttributeDecimalDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Decimal},Sirenix.OdinInspector.MaxValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeUint32Drawer">
            <summary>
            Draws uint properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeUint32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt32},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeUint64Drawer">
            <summary>
            Draws ulong properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeUint64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt64},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeUint16Drawer">
            <summary>
            Draws ushort properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeUint16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt16},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeSbyteDrawer">
            <summary>
            Draws sbyte properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeSbyteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.SByte},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeInt64Drawer">
            <summary>
            Draws long properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeInt64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int64},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeInt32Drawer">
            <summary>
            Draws int properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeInt32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int32},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeInt16Drawer">
            <summary>
            Draws short properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeInt16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int16},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeFloatDrawer">
            <summary>
            Draws float properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeFloatDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Single},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeDoubleDrawer">
            <summary>
            Draws double properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeDoubleDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Double},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeByteDrawer">
            <summary>
            Draws byte properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeByteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Byte},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeVector2Drawer">
            <summary>
            Draws Vector2 properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeVector2Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector2},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeVector3Drawer">
            <summary>
            Draws Vector3 properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeVector3Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector3},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeVector4Drawer">
            <summary>
            Draws Vector4 properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeVector4Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector4},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeDecimalDrawer">
            <summary>
            Draws decimal properties marked with <see cref="T:Sirenix.OdinInspector.MinValueAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MinValueAttributeDecimalDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Decimal},Sirenix.OdinInspector.MinValueAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeByteDrawer">
            <summary>
            Draws byte properties marked with <see cref="T:UnityEngine.RangeAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeByteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Byte},UnityEngine.RangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeDoubleDrawer">
            <summary>
            Draws double properties marked with <see cref="T:UnityEngine.RangeAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeDoubleDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Double},UnityEngine.RangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeFloatDrawer">
            <summary>
            Draws float properties marked with <see cref="T:UnityEngine.RangeAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeFloatDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Single},UnityEngine.RangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeDecimalDrawer">
            <summary>
            Draws decimal properties marked with <see cref="T:UnityEngine.RangeAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeDecimalDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Decimal},UnityEngine.RangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeInt16Drawer">
            <summary>
            Draws short properties marked with <see cref="T:UnityEngine.RangeAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeInt16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int16},UnityEngine.RangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeInt32Drawer">
            <summary>
            Draws int properties marked with <see cref="T:UnityEngine.RangeAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeInt32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int32},UnityEngine.RangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeInt64Drawer">
            <summary>
            Draws long properties marked with <see cref="T:UnityEngine.RangeAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeInt64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int64},UnityEngine.RangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeSByteDrawer">
            <summary>
            Draws sbyte properties marked with <see cref="T:UnityEngine.RangeAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeSByteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.SByte},UnityEngine.RangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeUInt16Drawer">
            <summary>
            Draws ushort properties marked with <see cref="T:UnityEngine.RangeAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeUInt16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt16},UnityEngine.RangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeUInt32Drawer">
            <summary>
            Draws uint properties marked with <see cref="T:UnityEngine.RangeAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeUInt32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt32},UnityEngine.RangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeUInt64Drawer">
            <summary>
            Draws ulong properties marked with <see cref="T:UnityEngine.RangeAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.RangeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MaxValueAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MinMaxSliderAttribute"/>
            <seealso cref="T:UnityEngine.DelayedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RangeAttributeUInt64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt64},UnityEngine.RangeAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DisplayAsStringAttributeDrawer`1">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.DisplayAsStringAttribute"/>.
            Calls the properties ToString method to get the string to draw.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.HideLabelAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.LabelTextAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.InfoBoxAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DetailedInfoBoxAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.MultiLinePropertyAttribute"/>
            <seealso cref="T:UnityEngine.MultilineAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DisplayAsStringAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.DisplayAsStringAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.VerticalGroupAttributeDrawer">
            <summary>
            Drawer for the <see cref="T:Sirenix.OdinInspector.VerticalGroupAttribute"/>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.VerticalGroupAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.VerticalGroupAttributeDrawer.DrawPropertyGroupLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.VerticalGroupAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HorizontalGroupAttributeDrawer">
            <summary>
            Drawer for the <see cref="T:Sirenix.OdinInspector.HorizontalGroupAttribute"/>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.HorizontalGroupAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HorizontalGroupAttributeDrawer.DrawPropertyGroupLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.HorizontalGroupAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.TitleGroupAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.TitleGroupAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.TitleGroupAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.TitleAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TitleGroupAttributeDrawer.DrawPropertyGroupLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.TitleGroupAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.CharDrawer">
            <summary>
            Char property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.CharDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Char},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DelegateDrawer`1">
            <summary>
            Delegate property drawer. This drawer is rather simplistic for now, and will receive significant upgrades in the future.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelegateDrawer`1.CanDrawTypeFilter(System.Type)">
            <summary>
            See <see cref="M:Sirenix.OdinInspector.Editor.OdinDrawer.CanDrawTypeFilter(System.Type)"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DelegateDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DictionaryDrawer`3">
            <summary>
            Property drawer for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DictionaryDrawer`3.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DrawWithUnityBaseDrawer`1">
            <summary>
            Base class to derive from for value drawers that merely wish to cause a value to be drawn by Unity.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DrawWithUnityBaseDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.GradientDrawer">
            <summary>
            Gradient property drawer.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.GuidDrawer">
            <summary>
            Int property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.GuidDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Guid},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.GUIStyleStateDrawer">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.GUIStyleStateDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.GUIStyleState},UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.LayerMaskDrawer">
            <summary>
            LayerMask property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.LayerMaskDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.LayerMask},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.TwoDimensionalArrayDrawer`2">
            <summary>
            Base class for two-dimentional array drawers.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TwoDimensionalArrayDrawer`2.CanDrawTypeFilter(System.Type)">
            <summary>
            <para>Override this method in order to define custom type constraints to specify whether or not a type should be drawn by the drawer.</para>
            <para>Note that Odin's <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator" /> has full support for generic class constraints, so most often you can get away with not overriding CanDrawTypeFilter.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TwoDimensionalArrayDrawer`2.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TwoDimensionalArrayDrawer`2.OnBeforeDrawTable(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.Editor.Drawers.TwoDimensionalArrayDrawer{`0,`1}.Context,UnityEngine.GUIContent)">
            <summary>
            This method gets called from DrawPropertyLayout right before the table and error message is drawn.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TwoDimensionalArrayDrawer`2.CompareElement(`1,`1)">
            <summary>
            Compares the element.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TwoDimensionalArrayDrawer`2.DrawElement(UnityEngine.Rect,`1)">
            <summary>
            Draws a table cell element.
            </summary>
            <param name="rect">The rect.</param>
            <param name="value">The input value.</param>
            <returns>The output value.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TwoDimensionalGenericArrayDrawer`2.DrawElement(UnityEngine.Rect,`1)">
            <summary>
            Draws the element.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.NullableDrawer`1">
            <summary>
            Property drawer for nullables.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.NullableDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Nullable{`0}},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.QuaternionDrawer">
            <summary>
            Quaternion property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.QuaternionDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Quaternion},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.QuaternionDrawer.PopulateGenericMenu(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEditor.GenericMenu)">
            <summary>
            Populates the generic menu for the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RectDrawer">
            <summary>
            Rect property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RectDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Rect},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.SyncListDrawer`2">
            <summary>
            SyncList property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.SyncListDrawer`2.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.SyncVarAttributeDrawer">
            <summary>
            SyncVar attribute drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.SyncVarAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.Networking.SyncVarAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.TypeDrawer`1">
            <summary>
            Type property drawer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TypeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.AssetListAttributeDrawer`2">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.AssetListAttribute"/>.
            Displays a configurable list of assets, where each item can be enabled or disabled.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.AssetListAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.AssetsOnlyAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.SceneObjectsOnlyAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.RequiredAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.AssetListAttributeDrawer`2.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.AssetListAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.AssetListAttributeDrawer`2.PopulateGenericMenu(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEditor.GenericMenu)">
            <summary>
            Populates the generic menu for the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.AssetsOnlyAttributeDrawer`1">
            <summary>
            Draws Unity object properties marked with <see cref="T:Sirenix.OdinInspector.AssetsOnlyAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.AssetsOnlyAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.SceneObjectsOnlyAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.AssetListAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.RequiredAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.AssetsOnlyAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.AssetsOnlyAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ColorPaletteAttributeDrawer">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ColorPaletteAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Color},Sirenix.OdinInspector.ColorPaletteAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.CustomContextMenuAttributeDrawer">
            <summary>
            Adds a generic menu option to properties marked with <see cref="T:Sirenix.OdinInspector.CustomContextMenuAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.CustomContextMenuAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableContextMenuAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.OnInspectorGUIAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.CustomContextMenuAttributeDrawer.PopulateGenericMenu(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEditor.GenericMenu)">
            <summary>
            Populates the generic menu for the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.CustomContextMenuAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.CustomContextMenuAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.EnableIfAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInEditorModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ReadOnlyAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideIfAttribute"/>
            <seealso cref="T:UnityEngine.HideInInspector"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.EnableIfAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.EnableIfAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HeaderAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:UnityEngine.HeaderAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.HeaderAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.TitleAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideLabelAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.LabelTextAttribute"/>
            <seealso cref="T:UnityEngine.SpaceAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HeaderAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.HeaderAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HideInEditorModeAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.HideInEditorModeAttribute"/>
            </summary>
            <seealso cref="T:UnityEngine.HideInInspector"/>
            <seealso cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ReadOnlyAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.EnableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableIfAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInEditorModeAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisableInPlayModeAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HideInEditorModeAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.HideInEditorModeAttribute,UnityEngine.GUIContent)">
            <summary>
            Only calls the next drawer, when the editor is in play mode.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.HideLabelAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.HideLabelAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.HideLabelAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.LabelTextAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.TitleAttribute"/>
            <seealso cref="T:UnityEngine.HeaderAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.GUIColorAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.HideLabelAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.HideLabelAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.IndentAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.IndentAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.IndentAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.IndentAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.IndentAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.InfoBoxAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.InfoBoxAttribute"/>.
            Draws an info box above the property. Error and warning info boxes can be tracked by Odin Scene Validator.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.InfoBoxAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DetailedInfoBoxAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.RequiredAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.InfoBoxAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.InfoBoxAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.LabelTextAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.LabelTextAttribute"/>.
            Creates a new GUIContent, with the provided label text, before calling further down in the drawer chain.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.LabelTextAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.HideLabelAttribute"/>
            <seealso cref="T:UnityEngine.TooltipAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.LabelWidthAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.TitleAttribute"/>
            <seealso cref="T:UnityEngine.HeaderAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.GUIColorAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.LabelTextAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.LabelTextAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the attribute.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MultiLineAttributeDrawer">
            <summary>
            Draws string properties marked with <see cref="T:UnityEngine.MultilineAttribute"/>.
            This drawer only works for string fields, unlike <see cref="T:Sirenix.OdinInspector.Editor.Drawers.MultiLinePropertyAttributeDrawer"/>.
            </summary>
            <seealso cref="T:UnityEngine.MultilineAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.Drawers.MultiLineAttributeDrawer"/>
            <seealso cref="T:Sirenix.OdinInspector.DisplayAsStringAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.InfoBoxAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DetailedInfoBoxAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.Drawers.MultiLineAttributeDrawer.GUICallType">
            <summary>
            GUI call type.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MultiLineAttributeDrawer.GetRectHeight(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.String},UnityEngine.MultilineAttribute,UnityEngine.GUIContent)">
            <summary>
            Gets the height of the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MultiLineAttributeDrawer.DrawPropertyRect(UnityEngine.Rect,Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.String},UnityEngine.MultilineAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MultiLinePropertyAttributeDrawer">
            <summary>
            Draws string properties marked with <see cref="T:Sirenix.OdinInspector.MultiLinePropertyAttribute"/>.
            This drawer works for both string field and properties, unlike <see cref="T:Sirenix.OdinInspector.Editor.Drawers.MultiLineAttributeDrawer"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.MultiLinePropertyAttribute"/>
            <seealso cref="T:UnityEngine.MultilineAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DisplayAsStringAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.InfoBoxAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DetailedInfoBoxAttribute"/>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.Drawers.MultiLinePropertyAttributeDrawer.GUICallType">
            <summary>
            GUI call type.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MultiLinePropertyAttributeDrawer.GetRectHeight(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.String},Sirenix.OdinInspector.MultiLinePropertyAttribute,UnityEngine.GUIContent)">
            <summary>
            Gets the height of the property in the inspector.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MultiLinePropertyAttributeDrawer.DrawPropertyRect(UnityEngine.Rect,Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.String},Sirenix.OdinInspector.MultiLinePropertyAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.OnInspectorGUIAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.OnInspectorGUIAttribute"/>.
            Calls the method, the attribute is either attached to, or the method that has been specified in the attribute, to allow for custom GUI drawing.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.OnInspectorGUIAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.OnValueChangedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.DrawWithUnityAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.InlineEditorAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.OnInspectorGUIAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.OnInspectorGUIAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.OnValueChangedAttributeDrawer`1">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.OnValueChangedAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.OnValueChangedAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.OnInspectorGUIAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.InfoBoxAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.OnValueChangedAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.OnValueChangedAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.RequiredAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.RequiredAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.RequiredAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.InfoBoxAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.RequiredAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.RequiredAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.SceneObjectsOnlyAttributeDrawer`1">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.SceneObjectsOnlyAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.SceneObjectsOnlyAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.AssetsOnlyAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.SceneObjectsOnlyAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.SceneObjectsOnlyAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ValueDropdownAttributeDrawer`1">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.ValueDropdownAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.ValueDropdownAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ValueDropdownAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.ValueDropdownAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.TitleAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.TitleAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.TitleAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.TitleGroupAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TitleAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.TitleAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.TooltipAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:UnityEngine.TooltipAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.TooltipAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TooltipAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.TooltipAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyTooltipAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.PropertyTooltipAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.PropertyTooltipAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyTooltipAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.PropertyTooltipAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.UnityDecoratorAttributeDrawer`2">
            <summary>
            Draws all Unity DecoratorDrawers within prepend attribute drawers within Odin.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.UnityDecoratorAttributeDrawer`2.#cctor">
            <summary>
            Initializes the <see cref="T:Sirenix.OdinInspector.Editor.Drawers.UnityDecoratorAttributeDrawer`2"/> class.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.UnityDecoratorAttributeDrawer`2.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,`1,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ValidateInputAttributeDrawer`1">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.ValidateInputAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ValidateInputAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.ValidateInputAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ValidateInputAttributeDrawer`1.InnerDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.ValidateInputAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ShowIfAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.ShowIfAttribute"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ShowIfAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.ShowIfAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.BoxGroupAttributeDrawer">
            <summary>
            Draws all properties grouped together with the <see cref="T:Sirenix.OdinInspector.BoxGroupAttribute"/>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.BoxGroupAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.BoxGroupAttributeDrawer.DrawPropertyGroupLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.BoxGroupAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ButtonGroupAttributeDrawer">
            <summary>
            Draws all properties grouped together with the <see cref="T:Sirenix.OdinInspector.ButtonGroupAttribute"/>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.ButtonGroupAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ButtonGroupAttributeDrawer.DrawPropertyGroupLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.ButtonGroupAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.FoldoutGroupAttributeDrawer">
            <summary>
            Draws all properties grouped together with the <see cref="T:Sirenix.OdinInspector.FoldoutGroupAttribute"/>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.FoldoutGroupAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.FoldoutGroupAttributeDrawer.DrawPropertyGroupLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.FoldoutGroupAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.TabGroupAttributeDrawer">
            <summary>
            Draws all properties grouped together with the <see cref="T:Sirenix.OdinInspector.TabGroupAttribute"/>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.TabGroupAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.TabGroupAttributeDrawer.DrawPropertyGroupLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.TabGroupAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ToggleAttributeDrawer">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.ToggleAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.ToggleAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ToggleAttributeDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.ToggleAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ToggleGroupAttributeDrawer">
            <summary>
            Draws all properties grouped together with the <see cref="T:Sirenix.OdinInspector.ToggleGroupAttribute"/>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.ToggleGroupAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ToggleGroupAttributeDrawer.DrawPropertyGroupLayout(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.ToggleGroupAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.MethodPropertyDrawer`1">
            <summary>
            Draws all methods included in a property tree. Note that methods does not get passed to regular drawers.
            Methods are currently handled as a special case, this might change in the future.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.MethodPropertyDrawer`1.DrawPropertyImplementation(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.NullableReferenceDrawer`1">
            <summary>
            Draws all nullable reference types, with an object field.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.NullableReferenceDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PrimitiveValueConflictDrawer`1">
            <summary>
            Evaluates all strings, enums and primitive types and ensures EditorGUI.showMixedValue is true if there are any value conflicts in the current selection.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PrimitiveValueConflictDrawer`1.CanDrawTypeFilter(System.Type)">
            <summary>
            Sets the drawer to only be evaluated on primitive types, strings and enums.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PrimitiveValueConflictDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.PropertyContextMenuDrawer`1">
            <summary>
            Opens a context menu for any given property on right click. The context menu is populated by all relevant drawers that implements <see cref="T:Sirenix.OdinInspector.Editor.IDefinesGenericMenuItems"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.Editor.IDefinesGenericMenuItems"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.PropertyContextMenuDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ReferenceDrawer`1">
            <summary>
            Draws all reference type properties, which has already been drawn elsewhere. This drawer adds an additional foldout to prevent infinite draw depth.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ReferenceDrawer`1.CanDrawTypeFilter(System.Type)">
            <summary>
            Prevents the drawer from being applied to UnityEngine.Object references since they are shown as an object field, and is not drawn in-line.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ReferenceDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ReferencePathConflictDrawer`1">
            <summary>
            Draws properties with a <see cref="F:Sirenix.OdinInspector.Editor.PropertyValueState.ReferencePathConflict"/> set.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ReferencePathConflictDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ReferenceValueConflictDrawer`1">
            <summary>
            <para>
            When multiple objects are selected and inspected, this his drawer ensures UnityEditor.EditorGUI.showMixedValue
            gets set to true if there are any conflicts in the selection for any given property.
            Otherwise the next drawer is called.
            </para>
            <para>This drawer also implements <see cref="T:Sirenix.OdinInspector.Editor.IDefinesGenericMenuItems"/> and provides a right-click context menu item for resolving conflicts if any.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ReferenceValueConflictDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.AnimationCurveDrawer">
            <summary>
            Animation curve property drawer.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.BooleanDrawer">
            <summary>
            Bool property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.BooleanDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Boolean},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ByteDrawer">
            <summary>
            Byte property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ByteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Byte},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.Color32Drawer">
            <summary>
            Color32 property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.Color32Drawer.DrawPropertyField(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Color32},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ColorDrawer">
            <summary>
            Color property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ColorDrawer.DrawPropertyField(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Color},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ColorPaletteDrawer">
            <summary>
            Color palette property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ColorPaletteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{Sirenix.OdinInspector.Editor.ColorPalette},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.CompositeDrawer">
            <summary>
            Drawer for composite properties.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.CompositeDrawer.DrawPropertyImplementation(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DecimalDrawer">
            <summary>
            Decimal property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DecimalDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Decimal},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.DoubleDrawer">
            <summary>
            Double property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.DoubleDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Double},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.EnumDrawer`1">
            <summary>
            Enum property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.EnumDrawer`1.CanDrawTypeFilter(System.Type)">
            <summary>
            Returns <c>true</c> if the drawer can draw the type.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.EnumDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.Int16Drawer">
            <summary>
            Short property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.Int16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int16},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.Int32Drawer">
            <summary>
            Int property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.Int32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int32},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.Int64Drawer">
            <summary>
            Long property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.Int64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int64},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.ListDrawer`2">
            <summary>
            Property drawer for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.ListDrawer`2.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.SByteDrawer">
            <summary>
            SByte property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.SByteDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.SByte},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.SingleDrawer">
            <summary>
            Float property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.SingleDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Single},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.StringDrawer">
            <summary>
            String property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.StringDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.String},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.UInt16Drawer">
            <summary>
            Ushort property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.UInt16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt16},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.UInt32Drawer">
            <summary>
            Uint property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.UInt32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt32},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.UInt64Drawer">
            <summary>
            Ulong property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.UInt64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.UInt64},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.UnityEventDrawer`1">
            <summary>
            Unity event drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.UnityEventDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.UnityObjectDrawer`1">
            <summary>
            Unity object drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.UnityObjectDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.Vector2Drawer">
            <summary>
            Vector2 proprety drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.Vector2Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector2},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.Vector2Drawer.PopulateGenericMenu(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEditor.GenericMenu)">
            <summary>
            Populates the generic menu for the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.Vector3Drawer">
            <summary>
            Vector3 property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.Vector3Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector3},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.Vector3Drawer.PopulateGenericMenu(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEditor.GenericMenu)">
            <summary>
            Populates the generic menu for the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.Drawers.Vector4Drawer">
            <summary>
            Vector4 property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.Vector4Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector4},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.Drawers.Vector4Drawer.PopulateGenericMenu(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEditor.GenericMenu)">
            <summary>
            Populates the generic menu for the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.GeneralDrawerConfig">
            <summary>
            <para>Contains general configuration for all Odin drawers.</para>
            <para>
            You can modify the configuration in the Odin Preferences window found in 'Tools -> Odin Inspector -> Preferences -> Drawers -> General',
            or by locating the configuration file stored as a serialized object in the Sirenix folder under 'Odin Inspector/Config/Editor/GeneralDrawerConfig'.
            </para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.ExpandFoldoutByDefault">
            <summary>
            If set to true, most foldouts throughout the inspector will be expanded by default.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.GUIFoldoutAnimationDuration">
            <summary>
            Specify the animation speed for most foldouts throughout the inspector.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.HideFoldoutWhileEmpty">
            <summary>
            Specify whether or not a list should hide the foldout triangle when the list is empty.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.HidePagingWhileCollapsed">
            <summary>
            Specify whether or not lists should hide the paging buttons when the list is collapsed.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.HidePagingWhileOnlyOnePage">
            <summary>
            Specify whether or not lists should hide the paging buttons when there is only one page.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.NumberOfItemsPrPage">
            <summary>
            Specify the number of elements drawn per page.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.OpenListsByDefault">
            <summary>
            Specify whether or not lists should be expanded or collapsed by default.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.ResponsiveVectorComponentFields">
            <summary>
            When <c>true</c> the component labels, for vector fields, will be hidden when the field is too narrow.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.QuaternionDrawMode">
            <summary>
            Specify how the Quaternion struct should be shown in the inspector.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.ShakingAnimationDuration">
            <summary>
            Specify the shaking duration for most shaking animations throughout the inspector.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.ShowExpandButton">
            <summary>
            Specify whether or not to include a button which expands the list, showing all pages at once.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.ShowItemCount">
            <summary>
            Specify whether or not lists should show item count.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.ShowMonoScriptInEditor">
            <summary>
            Specify whether or not the script selector above components should be drawn.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.ShowPrefabModificationsDisabledMessage">
            <summary>
            Specify whether or not the warning for properties that do not support prefab modifications should be shown in the inspector.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.MaxRecursiveDrawDepth">
            <summary>
            Specifies the maximum depth to which a property can draw itself recursively before the system refuses to draw it any deeper.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GeneralDrawerConfig.TabPageSlideAnimationDuration">
            <summary>
            Specify the animation speed for <see cref="T:Sirenix.OdinInspector.TabGroupAttribute"/>
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.InspectorConfig">
            <summary>
            <para>
            Tell Odin which types should be drawn or should not be drawn by Odin.
            If a type is drawn by Odin, a single line of code is generated, telling Unity that we have a custom editor for the type.
            All generated editors is compiled into a DLL assembly located in Sirenix/Assemblies/Editor/GeneratedEditors.dll</para>
            <para>
            You can modify which types should be drawn by Odin in the Preferences window found in 'Tools -> Odin Inspector -> Preferences -> Editor Types',
            or by locating the configuration file stored as a serialized object in the Sirenix folder under 'Odin Inspector/Config/Editor/InspectorConfig'.
            </para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorConfig.EnableOdinInInspector">
            <summary>
            Whether Odin is enabled in the inspector or not.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorConfig.DefaultEditorBehaviour">
            <summary>
            InspectorDefaultEditors is a bitmask used to tell which types should have an Odin Editor generated.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorConfig.UpdateOdinEditors">
            <summary>
            Updates Unity with the current Odin editor configuration.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.InspectorDefaultEditors">
            <summary>
            InspectorDefaultEditors is a bitmask used to tell <see cref="T:Sirenix.OdinInspector.Editor.InspectorConfig"/> which types should have an Odin Editor generated.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorConfig"/>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.InspectorDefaultEditors.None">
            <summary>
            Excludes all types.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.InspectorDefaultEditors.UserTypes">
            <summary>
            UserTypes includes all custom user scripts that are not located in an editor or plugin folder.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.InspectorDefaultEditors.PluginTypes">
            <summary>
            PluginTypes includes all types located in the plugins folder and are not located in an editor folder.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.InspectorDefaultEditors.UnityTypes">
            <summary>
            UnityTypes includes all types depended on UnityEngine and from UnityEngine, except editor, plugin and user types.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.InspectorDefaultEditors.OtherTypes">
            <summary>
            OtherTypes include all other types that are not depended on UnityEngine or UnityEditor.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig">
            <summary>
            <para>Contains configuration data for which types Odin should draw in the inspector.</para>
            </summary>
            <remarks>
            <para>Note that this class supports assigning arbitrary editor types to inspect any Unity object type. The Editor Types GUI in preferences simply does not, as of now, support assigning editors of any other type than <see cref="T:Sirenix.OdinInspector.Editor.OdinEditor"/>. However, the API is open to further customization.</para>
            <para>When an editor is generated for a type, a new editor type is added to the GeneratedOdinEditors assembly, which is derived from the assigned editor type - in most cases, <see cref="T:Sirenix.OdinInspector.Editor.OdinEditor"/>.</para>
            <para>You can check if an editor is compatible using <see cref="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.UnityInspectorEditorIsValidBase(System.Type,System.Type)"/>.</para>
            </remarks>
            <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfigDrawer"/>.
            <seealso cref="!:EditorCompilation"/>.
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.TypeBinder">
            <summary>
            <para>The type binder that the <see cref="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig"/> uses to bind types to names, and names to types.</para>
            <para>This is usually an instance of <see cref="T:Sirenix.Serialization.DefaultSerializationBinder"/>.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.ResetToDefault">
            <summary>
            Resets the drawing configuration to the default values.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.GetAllDrawnTypesWithEntries">
            <summary>
            Gets a list of all drawn types that have entries in the drawing config.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.UpdateCaches">
            <summary>
            Forces the config's internal drawer type to value type lookup cache to rebuild itself.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.ClearEditorEntryForDrawnType(System.Type)">
            <summary>
            Clears the editor type entry for the given drawer, so it will be set to Unity's default.
            </summary>
            <param name="drawnType">The drawn type to clear the editor for.</param>
            <exception cref="T:System.ArgumentNullException">drawnType is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.SetEditorType(System.Type,System.Type)">
            <summary>
            Assigns a given editor to draw a given type.
            </summary>
            <param name="drawnType">The drawn type to assign an editor type for.</param>
            <param name="editorType">The editor type to assign. When generating editors, a type derived from this editor will be created and set to draw the given drawn type.</param>
            <exception cref="T:System.ArgumentNullException">drawnType</exception>
            <exception cref="T:System.ArgumentException">The type " + editorType.GetNiceName() + " is not a valid base editor for type " + drawnType.GetNiceName() + ". Check criteria using <see cref="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.UnityInspectorEditorIsValidBase(System.Type,System.Type)"/>.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.HasEntryForType(System.Type)">
            <summary>
            Determines whether an editor value has been assigned for a given drawn type.
            </summary>
            <param name="drawnType">The drawn type to check.</param>
            <exception cref="T:System.ArgumentNullException">drawnType is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.GetEditorType(System.Type)">
            <summary>
            Gets which editor type would draw the given type. If the type has not been assigned a custom editor type in the config, the default editor type is returned using <see cref="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.GetDefaultEditorType(System.Type)"/>.
            </summary>
            <param name="drawnType">The drawn type to get an editor type for.</param>
            <returns>The editor that would draw the given type.</returns>
            <exception cref="T:System.ArgumentNullException">drawnType is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.GetDefaultEditorType(System.Type)">
            <summary>
            Gets the default editor that this type would have, if no custom editor was set for this type in particular. This is calculated using the value of <see cref="P:Sirenix.OdinInspector.Editor.InspectorConfig.DefaultEditorBehaviour"/>.
            </summary>
            <param name="drawnType">The drawn type to get the default editor for.</param>
            <returns>The editor that would draw this type by default, or null, if there is no default Odin-defined editor for the drawn type.</returns>
            <exception cref="T:System.ArgumentNullException">drawnType is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.UnityInspectorEditorIsValidBase(System.Type)">
            <summary>
            Checks whether the given editor can be assigned to draw any type using the <see cref="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig"/> class.
            </summary>
            <param name="editorType">Type of the editor to check.</param>
            <returns>True if the editor is valid, otherwise false</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.UnityInspectorEditorIsValidBase(System.Type,System.Type)">
            <summary>
            <para>Checks whether the given editor can be assigned to draw a given type using the <see cref="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig" /> class.</para>
            <para>This method checks the <see cref="T:UnityEditor.CustomEditor"/> attribute on the type for whether the given type is compatible.</para>
            </summary>
            <param name="editorType">Type of the editor to check.</param>
            <param name="drawnType">Type of the drawn value to check. If this parameter is null, the drawn type is not checked for compatibility with the editor type; only the editor type itself is checked for validity.</param>
            <returns>True if the editor is valid, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">editorType</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.GetEditorDrawnType(System.Type,System.Boolean@)">
            <summary>
            <para>Gets the type that an editor draws, by extracting it from the editor's <see cref="T:UnityEditor.CustomEditor"/> attribute, if it is declared.</para>
            <para>This method returns null for abstract editor types, as those can never draw anything.</para>
            </summary>
            <param name="editorType">Type of the editor.</param>
            <param name="editorForChildClasses">Whether the editor in question is also an editor for types derived from the given type.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">editorType</exception>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.MissingEditor">
            <summary>
            A type that indicates that a drawer is missing.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfigDrawer">
            <summary>
            <para>Draws an <see cref="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig"/> instance, and contains methods getting all types that should be drawn by Odin.</para>
            <para>Note that this class keeps a lot of static state, and is only intended to draw the instance of <see cref="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig"/> that exists in the <see cref="T:Sirenix.OdinInspector.Editor.InspectorConfig"/> singleton asset. If used to draw other instances, odd behaviour may occur.</para>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig"/>.
            <seealso cref="!:EditorCompilation"/>.
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfigDrawer.OdinCanCreateEditorFor(System.Type)">
            <summary>
            Determines whether Odin is capable of creating a custom editor for a given type.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfigDrawer.GetEditors">
            <summary>
            Gets an array of all assigned editor types, and the types they have to draw.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfigDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.TypeDrawerPair">
            <summary>
            <para>Contains information about an editor type which is assigned to draw a certain type in the inspector.</para>
            <para>This class uses the <see cref="F:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig.TypeBinder"/> instance to bind types to names, and names to types.</para>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfigDrawer"/>.
            <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorTypeDrawingConfig"/>.
            <seealso cref="!:EditorCompilation"/>.
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.TypeDrawerPair.Default">
            <summary>
            A default, empty <see cref="T:Sirenix.OdinInspector.Editor.TypeDrawerPair"/> value.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.TypeDrawerPair.DrawnTypeName">
            <summary>
            The name of the type to be drawn.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.TypeDrawerPair.EditorTypeName">
            <summary>
            The name of the editor type.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.TypeDrawerPair.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.TypeDrawerPair"/> struct.
            </summary>
            <param name="drawnType">The drawn type.</param>
            <exception cref="T:System.ArgumentNullException">drawnType is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.TypeDrawerPair.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.TypeDrawerPair"/> struct.
            </summary>
            <param name="drawnType">The drawn type.</param>
            <param name="editorType">The editor type.</param>
            <exception cref="T:System.ArgumentNullException">drawnType is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.TypeDrawerPair.Equals(Sirenix.OdinInspector.Editor.TypeDrawerPair)">
            <summary>
            Determines whether the specified <see cref="T:Sirenix.OdinInspector.Editor.TypeDrawerPair" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Sirenix.OdinInspector.Editor.TypeDrawerPair" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Sirenix.OdinInspector.Editor.TypeDrawerPair" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.TypeDrawerPair.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.TypeDrawerPair.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.TypeDrawerPair.op_Equality(Sirenix.OdinInspector.Editor.TypeDrawerPair,Sirenix.OdinInspector.Editor.TypeDrawerPair)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.TypeDrawerPair.op_Inequality(Sirenix.OdinInspector.Editor.TypeDrawerPair,Sirenix.OdinInspector.Editor.TypeDrawerPair)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.DictionaryPropertyChildren`3">
            <summary>
            Represents the children of a dictionary property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryPropertyChildren`3.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.DictionaryPropertyChildren`3"/> class.
            </summary>
            <param name="property">The property to handle children for.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.DictionaryPropertyChildren`3.IsCollection">
            <summary>
            Whether this <see cref="T:Sirenix.OdinInspector.Editor.PropertyChildren" /> instance represents the elements of a collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.DictionaryPropertyChildren`3.ActualCount">
            <summary>
            The actual number of children; this is different from <see cref="!:Count" />, in that <see cref="!:Count" /> will be 0 if <see cref="M:Sirenix.OdinInspector.Editor.DictionaryPropertyChildren`3.GetAllowChildren" /> is false.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryPropertyChildren`3.CreateChild(System.Int32)">
            <summary>
            Creates a child property for the given index.
            </summary>
            <param name="index">The index to create a child for.</param>
            <returns>
            The created child.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryPropertyChildren`3.GetAllowChildren">
            <summary>
            Determines whether to allow children on the property or not.
            </summary>
            <returns>
            Whether to allow children on the property or not.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryPropertyChildren`3.GetPathImplementation(System.Int32)">
            <summary>
            The implementaton that calculates a path for a given index.
            </summary>
            <param name="index">The index to calculate a path for.</param>
            <returns>
            The calculated path.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryPropertyChildren`3.UpdateCount">
            <summary>
            Updates the child count of the property.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Property with dictionary children has no value entry.
            or
            Property with dictionary children has a value entry with non-dictionary values in it.
            </exception>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IPropertyValueCollection">
            <summary>
            Represents a weakly typed collection of values for a <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry"/> - one value per selected inspector target.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueCollection.AreDirty">
            <summary>
            Whether the values have been changed since <see cref="M:Sirenix.OdinInspector.Editor.IPropertyValueCollection.MarkClean"/> was last called.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueCollection.MarkClean">
            <summary>
            Marks the value collection as being clean again. This is typically called at the end of the current GUI frame, during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ApplyChanges"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueCollection.ForceMarkDirty">
            <summary>
            Marks the value collection as being dirty, regardless of any value changes.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueCollection.RevertUnappliedValues">
            <summary>
            Reverts the value collection to its origin values (found in <see cref="P:Sirenix.OdinInspector.Editor.IPropertyValueCollection.Original"/>) from the last <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update"/> call, and marks the value collection as being clean again.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueCollection.ForceSetValue(System.Int32,System.Object)">
            <summary>
            <para>Force sets the value, ignoring whether it is editable or not.</para>
            <para>Note that this will fail on list element value entries where <see cref="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ListIsReadOnly"/> is true on the parent value entry.</para>
            </summary>
            <param name="index">The selection index of the value.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueCollection.Original">
            <summary>
            The original values of the value collection, such as they were immediately after the last <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update"/> call.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IPropertyValueCollection`1">
            <summary>
            Represents a strongly typed collection of values for a <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry`1"/> - one value per selected inspector target.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueCollection`1.Item(System.Int32)">
            <summary>
            Gets the value at the given selection index.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueCollection`1.Count">
            <summary>
            The number of values in the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueCollection`1.Original">
            <summary>
            The original values of the value collection, such as they were immediately after the last <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update"/> call.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueCollection`1.ForceSetValue(System.Int32,`0)">
            <summary>
            <para>Force sets the value, ignoring whether it is editable or not.</para>
            <para>Note that this will fail on list element value entries where <see cref="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ListIsReadOnly"/> is true on the parent value entry.</para>
            </summary>
            <param name="index">The selection index of the value.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2">
            <summary>
            <para>Represents an alias for a strongly typed collection of values for a <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry`1" /> - one value per selected inspector target.</para>
            <para>This class ensures that polymorphism works in the inspector, and can be strongly typed in applicable cases.</para>
            </summary>
            <typeparam name="TActualValue">The type of the aliased collection.</typeparam>
            <typeparam name="TValue">The polymorphic type of this collection, which is assignable to <see cref="!:TActualValue"/>.</typeparam>
            <seealso cref="T:Sirenix.OdinInspector.Editor.PropertyValueCollection" />
            <seealso cref="T:Sirenix.OdinInspector.Editor.IPropertyValueCollection`1" />
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.Editor.IPropertyValueCollection{`0},`1[],`1[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="aliasedCollection">The aliased collection.</param>
            <exception cref="T:System.ArgumentException">aliasedCollection</exception>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.AreDirty">
            <summary>
            Whether the values have been changed since <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.MarkClean" /> was last called.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.Count">
            <summary>
            The number of values in the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.IsSynchronized">
            <summary>
            Gets a value indicating whether this instance is synchronized.
            </summary>
            <value>
              <c>true</c> if this instance is synchronized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.SyncRoot">
            <summary>
            Gets the synchronization root object.
            </summary>
            <value>
            The synchronization root object.
            </value>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.WeakOriginal">
            <summary>
            The original values of the (loosely typed) value collection, such as they were immediately after the last <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update" /> call.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.Original">
            <summary>
            The original values of the value collection, such as they were immediately after the last <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update" /> call.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:TValue"/> at the specified index.
            </summary>
            <value>
            The <see cref="!:TValue"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.MarkClean">
            <summary>
            Marks the value collection as being clean again. This is typically called at the end of the current GUI frame, during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ApplyChanges" />.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.RevertUnappliedValues">
            <summary>
            Reverts the value collection to its origin values (found in <see cref="P:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.Original" />) from the last <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update" /> call, and marks the value collection as being clean again.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.Contains(System.Object)">
            <summary>
            Determines whether the collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the collection contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.IndexOf(System.Object)">
            <summary>
            Gets the index of the given value, or -1 if the value was not found.
            </summary>
            <param name="value">The value to get the index of.</param>
            <returns>
            The index of the given value, or -1 if the value was not found.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="index">The index to copy from.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.GetWeakValue(System.Int32)">
            <summary>
            Gets the weakly typed value at the given index.
            </summary>
            <param name="index">The index of the value to get.</param>
            <returns>
            The weakly typed value at the given index
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.SetWeakValue(System.Int32,System.Object)">
            <summary>
            Sets the weakly typed value at the given index.
            </summary>
            <param name="index">The index to set the value of.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.ForceSetValue(System.Int32,`1)">
            <summary>
            <para>Force sets the value, ignoring whether it is editable or not.</para>
            <para>Note that this will fail on list element value entries where <see cref="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ListIsReadOnly" /> is true on the parent value entry.</para>
            </summary>
            <param name="index">The selection index of the value.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.ForceSetValue(System.Int32,System.Object)">
            <summary>
            <para>Force sets the value, ignoring whether it is editable or not.</para>
            <para>Note that this will fail on list element value entries where <see cref="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ListIsReadOnly" /> is true on the parent value entry.</para>
            </summary>
            <param name="index">The selection index of the value.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollectionAlias`2.ForceMarkDirty">
            <summary>
            Marks the value collection as being dirty, regardless of any value changes.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.UnityOnlyPropertyInfo">
            <summary>
            Contains meta-data information about a Unity-only "ghost" property in the inspector, which is only represented by a Unity <see cref="T:UnityEditor.SerializedProperty"/>, and has no managed member representation at all.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityOnlyPropertyInfo.#ctor(System.String,System.Type,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.UnityOnlyPropertyInfo"/> class.
            </summary>
            <param name="unityPropertyName">Name of the unity property.</param>
            <param name="typeOfOwner">The type of owner.</param>
            <param name="typeOfValue">The type of value.</param>
            <param name="isEditable">Whether the property is editable.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.UnityOnlyPropertyInfo.IsUnityPropertyOnly">
            <summary>
            Whether this property only exists as a Unity <see cref="!:SerializedProperty" />, and has no associated managed member to represent it.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityOnlyPropertyInfo.GetValue(System.Object)">
            <summary>
            Gets the value of this property from the given owner. This method will throw an exception.
            </summary>
            <param name="owner">The owner.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityOnlyPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this property on the given owner. This method will throw an exception.
            </summary>
            <param name="owner">The owner.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityOnlyPropertyInfo.TryConvertToGetterSetter``2(Sirenix.OdinInspector.Editor.IValueGetterSetter{``0,``1}@)">
            <summary>
            Returns false and a null getter setter.
            </summary>
            <typeparam name="TOwner1">The type of the owner2.</typeparam>
            <typeparam name="TValue1">The type of the value.</typeparam>
            <param name="getterSetter">The getter setter.</param>
            <returns></returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.EditableKeyValuePair`2">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.EditableKeyValuePair`2.Key">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.EditableKeyValuePair`2.Value">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EditableKeyValuePair`2.#ctor(`0,`1)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EditableKeyValuePair`2.Equals(Sirenix.OdinInspector.Editor.EditableKeyValuePair{`0,`1})">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyDictionaryElementValueEntry`3">
            <summary>
            Represents the values of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/> for a dictionary key value pair element, and contains utilities for querying the values' type and getting and setting them.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyDictionaryElementValueEntry`3.HasTempInvalidKey">
            <summary>
            Whether this entry curreny has a temporary invalid key while the user is editing in the inspector.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyDictionaryElementValueEntry`3.ValueCategory">
            <summary>
            The value category of this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyDictionaryElementValueEntry`3.GetActualBoxedValue(`0)">
            <summary>
            Gets the actual boxed value of the tree target.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyDictionaryElementValueEntry`3.GetActualValue(`0)">
            <summary>
            Gets the actual value of the tree target.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyDictionaryElementValueEntry`3.SetActualBoxedValueImplementation(System.Int32,System.Object)">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyDictionaryElementValueEntry`3.SetActualValueImplementation(System.Int32,Sirenix.OdinInspector.Editor.EditableKeyValuePair{`1,`2})">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.DictionaryHandler`3">
            <summary>
            <para>A class that provides various utilities for modifying and querying dictionary values represented by a <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry"/>.</para>
            <para>It is also responsible for translating and ordering dictionary keys into persistent indices.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryHandler`3.#ctor(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.DictionaryHandler`3"/> class.
            </summary>
            <param name="valueEntry">The value entry to represent.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.DictionaryHandler`3.SupportsPrefabModifications">
            <summary>
            Whether the dictionary represented by this handler supports prefab modifications.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryHandler`3.GetKey(System.Int32,System.Int32)">
            <summary>
            Gets the key value at the given selection and dictionary index.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryHandler`3.GetKey(System.Object,System.Int32)">
            <summary>
            Gets the key value at the given index from the given dictionary.
            </summary>
            <exception cref="T:System.ArgumentNullException">dictionary is null</exception>
            <exception cref="T:System.ArgumentException">
            Given dictionary object cannot be assigned to type TDictionary.
            or
            The given dictionary to get key from was not registered in the handler.
            </exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryHandler`3.SetValue(`1,System.Object)">
            <summary>
            Queues a set value modification for a given key. Modifications are applied in Repaint.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryHandler`3.Remove(`1)">
            <summary>
            Queues a remove modification for a given key. Modifications are applied in Repaint.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryHandler`3.ApplyChanges">
            <summary>
            Apply all queued changes, and apply prefab modifications if applicable. This method only does something during Repaint.
            </summary>
            <returns>
            true if any changes were made, otherwise false
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DictionaryHandler`3.ForceUpdate">
            <summary>
            Force the dictionary handler to update its internal dictionary index mappings.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IDictionaryHandler">
            <summary>
            <para>An interface that provides various utilities for modifying and querying dictionary values represented by a <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry"/>.</para>
            <para>It is also responsible for translating and ordering dictionary keys into persistent indices.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IDictionaryHandler.SupportsPrefabModifications">
            <summary>
            Whether the dictionary represented by this handler supports prefab modifications.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IDictionaryHandler.GetKey(System.Int32,System.Int32)">
            <summary>
            Gets the key value at the given selection and dictionary index.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IDictionaryHandler.GetKey(System.Object,System.Int32)">
            <summary>
            Gets the key value at the given index from the given dictionary.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IDictionaryHandler.Remove(System.Object)">
            <summary>
            Queues a remove modification for a given key. Modifications are applied in Repaint.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IDictionaryHandler.SetValue(System.Object,System.Object)">
            <summary>
            Queues a set value modification for a given key. Modifications are applied in Repaint.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IDictionaryHandler.ApplyChanges">
            <summary>
            Apply all queued changes, and apply prefab modifications if applicable. This method only does something during Repaint.
            </summary>
            <returns>true if any changes were made, otherwise false</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IDictionaryHandler.ForceUpdate">
            <summary>
            Force the dictionary handler to update its internal dictionary index mappings.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IDictionaryHandler`1">
            <summary>
            <para>An interface that provides various utilities for modifying and querying dictionary values represented by a <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry"/>.</para>
            <para>It is also responsible for translating and ordering dictionary keys into persistent indices.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IDictionaryHandler`1.GetKey(System.Int32,System.Int32)">
            <summary>
            Gets the key value at the given selection and dictionary index.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IDictionaryHandler`1.GetKey(System.Object,System.Int32)">
            <summary>
            Gets the key value at the given index from the given dictionary.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IDictionaryHandler`1.Remove(`0)">
            <summary>
            Queues a remove modification for a given key. Modifications are applied in Repaint.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IDictionaryHandler`1.SetValue(`0,System.Object)">
            <summary>
            Queues a set value modification for a given key. Modifications are applied in Repaint.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IPropertyValueEntry">
            <summary>
            Represents the values of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>, and contains utilities for querying the values' type and getting and setting them.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ValueCount">
            <summary>
            The number of parallel values this entry represents. This will always be exactly equal to the count of <see cref="P:Sirenix.OdinInspector.Editor.PropertyTree.WeakTargets"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.IsEditable">
            <summary>
            Whether this value entry is editable or not.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.TargetReferencePath">
            <summary>
            If this value entry has the override type <see cref="F:Sirenix.OdinInspector.Editor.PropertyValueState.Reference"/>, this is the path of the property it references.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.SerializationBackend">
            <summary>
            <para>The actual serialization backend for this value entry, possibly inherited from the serialization backend of the root property this entry is a child of.</para>
            <para>Note that this is *not* always equal to <see cref="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.SerializationBackend"/>.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.Property">
            <summary>
            The property whose values this value entry represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ValueIsWeakList">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ValueIsStrongList">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ValueIsValidDictionary">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.Generic.IDictionary`2"/> and has a valid key type.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ValueCategory">
            <summary>
            The value category of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.WeakValues">
            <summary>
            Provides access to the weakly typed values of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ValueChangedFromPrefab">
            <summary>
            Whether this value entry has been changed from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ListLengthChangedFromPrefab">
            <summary>
            Whether this value entry has had its list length changed from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.DictionaryChangedFromPrefab">
            <summary>
            Whether this value entry has had its dictionary values changes from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.WeakSmartValue">
            <summary>
            <para>A weakly typed smart value that represents the first element of the value entry's value collection, but has "smart logic" for setting the value that detects relevant changes and applies them in parallel.</para>
            <para>This lets you often just use the smart value instead of having to deal with the tedium of multiple parallel values.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ParentType">
            <summary>
            The type from which this value entry comes. If this value entry represents a member value, this is the declaring type of the member. If the value entry represents a collection element, this is the type of the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.TypeOfValue">
            <summary>
            The most precise known contained type of the value entry. If polymorphism is in effect, this will be some type derived from <see cref="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.BaseValueType"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.BaseValueType">
            <summary>
            The base type of the value entry. If this is value entry represents a member value, this is the type of the member. If the value entry represents a collection element, this is the element type of the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ValueState">
            <summary>
            The special state of the value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.IsAlias">
            <summary>
            Whether this value entry is an alias, or not. Value entry aliases are used to provide strongly typed value entries in the case of polymorphism.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.Context">
            <summary>
            The context container of this property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry.IsMarkedAtomic">
            <summary>
            Whether this type is marked as an atomic type using a <see cref="T:Sirenix.OdinInspector.Editor.IAtomHandler"/>.
            </summary>
        </member>
        <member name="E:Sirenix.OdinInspector.Editor.IPropertyValueEntry.OnValueChanged">
            <summary>
            An event that is invoked during <see cref="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ApplyChanges"/>, when any values have changed.
            </summary>
        </member>
        <member name="E:Sirenix.OdinInspector.Editor.IPropertyValueEntry.OnChildValueChanged">
            <summary>
            An event that is invoked during <see cref="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ApplyChanges"/>, when any child values have changed.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.Update">
            <summary>
            Updates the values contained in this value entry to the actual values in the target objects, and updates its state (override, type of value, etc.) accordingly.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ApplyChanges">
            <summary>
            Applies the changes made to this value entry to the target objects, and registers prefab modifications as necessary.
            </summary>
            <returns>True if any changes were made, otherwise, false.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ValueTypeValuesAreEqual(Sirenix.OdinInspector.Editor.IPropertyValueEntry)">
            <summary>
            <para>Checks whether the values in this value entry are equal to the values in another value entry.</para>
            <para>Note, both value entries must have the same value type, and must represent values that are .NET value types.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.GetListValueEntryChanger">
            <summary>
            Gets a <see cref="T:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger"/> for this value entry, used to apply modifications to value entries representing a list.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.GetDictionaryHandler">
            <summary>
            Gets an <see cref="T:Sirenix.OdinInspector.Editor.IDictionaryHandler"/> for this value entry, used to apply modifications and get contextual data from value entries representing a dictionary.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ListIsReadOnly">
            <summary>
            Whether any of the list instances that this value entry represents are read only.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ValueIsPrefabDifferent(System.Object,System.Int32)">
            <summary>
            <para>Determines whether the value at the given selection index is different from the given prefab value, as is relevant for prefab modification checks.</para>
            <para>If the value is a reference type, null and type difference is checked. If value is a value type, a comparer from <see cref="M:Sirenix.Utilities.TypeExtensions.GetEqualityComparerDelegate``1"/> is used.</para>
            <para>This method is best ignored unless you know what you are doing.</para>
            </summary>
            <param name="value">The value to check differences against.</param>
            <param name="index">The selection index to compare against.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IPropertyValueEntry`1">
            <summary>
            Represents the strongly typed values of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>, and contains utilities for querying the values' type and getting and setting them.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry`1.Values">
            <summary>
            Provides access to the strongly typed values of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.IPropertyValueEntry`1.SmartValue">
            <summary>
            <para>A strongly typed smart value that represents the first element of the value entry's value collection, but has "smart logic" for setting the value that detects relevant changes and applies them in parallel.</para>
            <para>This lets you often just use the smart value instead of having to deal with the tedium of multiple parallel values.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry`1.ValueIsPrefabDifferent(`0,System.Int32)">
            <summary>
            <para>Determines whether the value at the given selection index is different from the given prefab value, as is relevant for prefab modification checks.</para>
            <para>If the value is a reference type, null and type difference is checked. If value is a value type, a comparer from <see cref="M:Sirenix.Utilities.TypeExtensions.GetEqualityComparerDelegate``1"/> is used.</para>
            <para>This method is best ignored unless you know what you are doing.</para>
            </summary>
            <param name="value">The value to check differences against.</param>
            <param name="index">The selection index to compare against.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias">
            <summary>
            A polymorphic alias for a <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry"/> instance, used to implement strongly typed polymorphism in Odin.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ValueCount">
            <summary>
            The number of parallel values this entry represents. This will always be exactly equal to the count of <see cref="P:Sirenix.OdinInspector.Editor.PropertyTree.WeakTargets" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.IsEditable">
            <summary>
            Whether this value entry is editable or not.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.TargetReferencePath">
            <summary>
            If this value entry has the override type <see cref="F:Sirenix.OdinInspector.Editor.PropertyValueState.Reference" />, this is the path of the property it references.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.SerializationBackend">
            <summary>
            <para>The actual serialization backend for this value entry, possibly inherited from the serialization backend of the root property this entry is a child of.</para>
            <para>Note that this is *not* always equal to <see cref="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.SerializationBackend" />.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.Property">
            <summary>
            The property whose values this value entry represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ValueIsWeakList">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.IList" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ValueIsStrongList">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ValueIsValidDictionary">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ValueCategory">
            <summary>
            The value category of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.WeakValues">
            <summary>
            Provides access to the weakly typed values of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ValueChangedFromPrefab">
            <summary>
            Whether this value entry has been changed from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ListLengthChangedFromPrefab">
            <summary>
            Whether this value entry has had its list length changed from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.DictionaryChangedFromPrefab">
            <summary>
            Whether this value entry has had its dictionary values changes from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.WeakSmartValue">
            <summary>
            <para>A weakly typed smart value that represents the first element of the value entry's value collection, but has "smart logic" for setting the value that detects relevant changes and applies them in parallel.</para>
            <para>This lets you often just use the smart value instead of having to deal with the tedium of multiple parallel values.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ParentType">
            <summary>
            The type from which this value entry comes. If this value entry represents a member value, this is the declaring type of the member. If the value entry represents a collection element, this is the type of the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.TypeOfValue">
            <summary>
            The most precise known contained type of the value entry. If polymorphism is in effect, this will be some type derived from <see cref="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.BaseValueType" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.BaseValueType">
            <summary>
            The base type of the value entry. If this is value entry represents a member value, this is the type of the member. If the value entry represents a collection element, this is the element type of the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ValueState">
            <summary>
            The special state of the value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.IsAlias">
            <summary>
            Whether this value entry is an alias, or not. Value entry aliases are used to provide strongly typed value entries in the case of polymorphism.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.Context">
            <summary>
            The context container of this property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.IsMarkedAtomic">
            <summary>
            Whether this type is marked as an atomic type using a <see cref="T:Sirenix.OdinInspector.Editor.IAtomHandler"/>.
            </summary>
        </member>
        <member name="E:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.OnValueChanged">
            <summary>
            An event that is invoked during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ApplyChanges" />, when any values have changed.
            </summary>
        </member>
        <member name="E:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.OnChildValueChanged">
            <summary>
            An event that is invoked during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ApplyChanges" />, when any child values have changed.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ApplyChanges">
            <summary>
            Applies the changes made to this value entry to the target objects, and registers prefab modifications as necessary.
            </summary>
            <returns>
            True if any changes were made, otherwise, false.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.GetListValueEntryChanger">
            <summary>
            Gets a <see cref="T:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger" /> for this value entry, used to apply modifications to value entries representing a list.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.GetDictionaryHandler">
            <summary>
            Gets an <see cref="T:Sirenix.OdinInspector.Editor.IDictionaryHandler" /> for this value entry, used to apply modifications and get contextual data from value entries representing a dictionary.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ListIsReadOnly">
            <summary>
            Whether any of the list instances that this value entry represents are read only.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.Update">
            <summary>
            Updates the values contained in this value entry to the actual values in the target objects, and updates its state (override, type of value, etc.) accordingly.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ValueTypeValuesAreEqual(Sirenix.OdinInspector.Editor.IPropertyValueEntry)">
            <summary>
            <para>Checks whether the values in this value entry are equal to the values in another value entry.</para>
            <para>Note, both value entries must have the same value type, and must represent values that are .NET value types.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.SetActualValue(System.Int32,System.Object)">
            <summary>
            Sets the actual value of a value entry, for a given selection index.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias.ValueIsPrefabDifferent(System.Object,System.Int32)">
            <summary>
            <para>Determines whether the value at the given selection index is different from the given prefab value, as is relevant for prefab modification checks.</para>
            <para>If the value is a reference type, null and type difference is checked. If value is a value type, a comparer from <see cref="M:Sirenix.Utilities.TypeExtensions.GetEqualityComparerDelegate``1" /> is used.</para>
            <para>This method is best ignored unless you know what you are doing.</para>
            </summary>
            <param name="value">The value to check differences against.</param>
            <param name="index">The selection index to compare against.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2">
            <summary>
            A polymorphic alias for a <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry"/> instance, used to implement strongly typed polymorphism in Odin.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.#ctor(Sirenix.OdinInspector.Editor.PropertyValueEntry{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2"/> class.
            </summary>
            <param name="valueEntry">The value entry to alias.</param>
            <exception cref="T:System.ArgumentNullException">valueEntry is null</exception>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.Values">
            <summary>
            Provides access to the strongly typed values of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.SmartValue">
            <summary>
            <para>A strongly typed smart value that represents the first element of the value entry's value collection, but has "smart logic" for setting the value that detects relevant changes and applies them in parallel.</para>
            <para>This lets you often just use the smart value instead of having to deal with the tedium of multiple parallel values.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.WeakSmartValue">
            <summary>
            <para>A weakly typed smart value that represents the first element of the value entry's value collection, but has "smart logic" for setting the value that detects relevant changes and applies them in parallel.</para>
            <para>This lets you often just use the smart value instead of having to deal with the tedium of multiple parallel values.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ValueCount">
            <summary>
            The number of parallel values this entry represents. This will always be exactly equal to the count of <see cref="P:Sirenix.OdinInspector.Editor.PropertyTree.WeakTargets" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.IsEditable">
            <summary>
            Whether this value entry is editable or not.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.TargetReferencePath">
            <summary>
            If this value entry has the override type <see cref="F:Sirenix.OdinInspector.Editor.PropertyValueState.Reference" />, this is the path of the property it references.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.SerializationBackend">
            <summary>
            <para>The actual serialization backend for this value entry, possibly inherited from the serialization backend of the root property this entry is a child of.</para>
            <para>Note that this is *not* always equal to <see cref="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.SerializationBackend" />.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.Property">
            <summary>
            The property whose values this value entry represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ValueIsWeakList">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.IList" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ValueIsStrongList">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ValueIsValidDictionary">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ValueCategory">
            <summary>
            The value category of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.WeakValues">
            <summary>
            Provides access to the weakly typed values of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ValueChangedFromPrefab">
            <summary>
            Whether this value entry has been changed from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ListLengthChangedFromPrefab">
            <summary>
            Whether this value entry has had its list length changed from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.DictionaryChangedFromPrefab">
            <summary>
            Whether this value entry has had its dictionary values changes from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ParentType">
            <summary>
            The type from which this value entry comes. If this value entry represents a member value, this is the declaring type of the member. If the value entry represents a collection element, this is the type of the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.TypeOfValue">
            <summary>
            The most precise known contained type of the value entry. If polymorphism is in effect, this will be some type derived from <see cref="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.BaseValueType" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.BaseValueType">
            <summary>
            The base type of the value entry. If this is value entry represents a member value, this is the type of the member. If the value entry represents a collection element, this is the element type of the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ValueState">
            <summary>
            The special state of the value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.IsMarkedAtomic">
            <summary>
            Whether this type is marked as an atomic type using a <see cref="T:Sirenix.OdinInspector.Editor.IAtomHandler"/>.
            </summary>
        </member>
        <member name="E:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.OnValueChanged">
            <summary>
            An event that is invoked during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ApplyChanges" />, when any values have changed.
            </summary>
        </member>
        <member name="E:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.OnChildValueChanged">
            <summary>
            An event that is invoked during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ApplyChanges" />, when any child values have changed.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ApplyChanges">
            <summary>
            Applies the changes made to this value entry to the target objects, and registers prefab modifications as necessary.
            </summary>
            <returns>
            True if any changes were made, otherwise, false.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.GetListValueEntryChanger">
            <summary>
            Gets a <see cref="T:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger" /> for this value entry, used to apply modifications to value entries representing a list.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.GetDictionaryHandler">
            <summary>
            Gets an <see cref="T:Sirenix.OdinInspector.Editor.IDictionaryHandler" /> for this value entry, used to apply modifications and get contextual data from value entries representing a dictionary.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ListIsReadOnly">
            <summary>
            Whether any of the list instances that this value entry represents are read only.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.Update">
            <summary>
            Updates the values contained in this value entry to the actual values in the target objects, and updates its state (override, type of value, etc.) accordingly.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ValueTypeValuesAreEqual(Sirenix.OdinInspector.Editor.IPropertyValueEntry)">
            <summary>
            <para>Checks whether the values in this value entry are equal to the values in another value entry.</para>
            <para>Note, both value entries must have the same value type, and must represent values that are .NET value types.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.SetActualValue(System.Int32,System.Object)">
            <summary>
            Sets the actual value of a value entry, for a given selection index.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ValueIsPrefabDifferent(`1,System.Int32)">
            <summary>
            <para>Determines whether the value at the given selection index is different from the given prefab value, as is relevant for prefab modification checks.</para>
            <para>If the value is a reference type, null and type difference is checked. If value is a value type, a comparer from <see cref="M:Sirenix.Utilities.TypeExtensions.GetEqualityComparerDelegate``1" /> is used.</para>
            <para>This method is best ignored unless you know what you are doing.</para>
            </summary>
            <param name="value">The value to check differences against.</param>
            <param name="index">The selection index to compare against.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntryAlias`2.ValueIsPrefabDifferent(System.Object,System.Int32)">
            <summary>
            <para>Determines whether the value at the given selection index is different from the given prefab value, as is relevant for prefab modification checks.</para>
            <para>If the value is a reference type, null and type difference is checked. If value is a value type, a comparer from <see cref="M:Sirenix.Utilities.TypeExtensions.GetEqualityComparerDelegate``1" /> is used.</para>
            <para>This method is best ignored unless you know what you are doing.</para>
            </summary>
            <param name="value">The value to check differences against.</param>
            <param name="index">The selection index to compare against.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.UnityPropertyValueEntry`2">
            <summary>
            Represents the values of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/> for a Unity-only property value, and contains utilities for querying the values' type and getting and setting them.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.UnityPropertyValueEntry`2.ValueCategory">
            <summary>
            The value category of this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyValueEntry`2.GetActualBoxedValue(`0)">
            <summary>
            Gets the actual boxed value of the tree target.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyValueEntry`2.GetActualValue(`0)">
            <summary>
            Gets the actual value of the tree target.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyValueEntry`2.SetActualBoxedValueImplementation(System.Int32,System.Object)">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyValueEntry`2.SetActualValueImplementation(System.Int32,`1)">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.WrapAttributeInt16Drawer">
            <summary>
            Draws short properties marked with <see cref="T:Sirenix.OdinInspector.WrapAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.WrapAttributeInt16Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int16},Sirenix.OdinInspector.WrapAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.WrapAttributeInt32Drawer">
            <summary>
            Draws int properties marked with <see cref="T:Sirenix.OdinInspector.WrapAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.WrapAttributeInt32Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int32},Sirenix.OdinInspector.WrapAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.WrapAttributeInt64Drawer">
            <summary>
            Draws long properties marked with <see cref="T:Sirenix.OdinInspector.WrapAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.WrapAttributeInt64Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Int64},Sirenix.OdinInspector.WrapAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.WrapAttributeFloatDrawer">
            <summary>
            Draws float properties marked with <see cref="T:Sirenix.OdinInspector.WrapAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.WrapAttributeFloatDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Single},Sirenix.OdinInspector.WrapAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.WrapAttributeDoubleDrawer">
            <summary>
            Draws double properties marked with <see cref="T:Sirenix.OdinInspector.WrapAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.WrapAttributeDoubleDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Double},Sirenix.OdinInspector.WrapAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.WrapAttributeDecimalDrawer">
            <summary>
            Draws decimal properties marked with <see cref="T:Sirenix.OdinInspector.WrapAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.WrapAttributeDecimalDrawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{System.Decimal},Sirenix.OdinInspector.WrapAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.WrapAttributeVector2Drawer">
            <summary>
            Draws Vector2 properties marked with <see cref="T:Sirenix.OdinInspector.WrapAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.WrapAttributeVector2Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector2},Sirenix.OdinInspector.WrapAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.WrapAttributeVector3Drawer">
            <summary>
            Draws Vector3 properties marked with <see cref="T:Sirenix.OdinInspector.WrapAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.WrapAttributeVector3Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector3},Sirenix.OdinInspector.WrapAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.WrapAttributeVector4Drawer">
            <summary>
            Draws Vector4 properties marked with <see cref="T:Sirenix.OdinInspector.WrapAttribute"/>.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.WrapAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.WrapAttributeVector4Drawer.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{UnityEngine.Vector4},Sirenix.OdinInspector.WrapAttribute,UnityEngine.GUIContent)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.DrawWithUnityAttributeDrawer`1">
            <summary>
            Draws properties marked with <see cref="T:Sirenix.OdinInspector.DrawWithUnityAttribute"/>.
            </summary>
            <seealso cref="T:UnityEngine.RequireComponent"/>
            <seealso cref="T:Sirenix.OdinInspector.OnInspectorGUIAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.InlineEditorAttribute"/>
            <seealso cref="T:UnityEngine.HideInInspector"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawWithUnityAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},Sirenix.OdinInspector.DrawWithUnityAttribute,UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.OdinEditorWindow">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.OdinEditorWindow.PropertyTree">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinEditorWindow.OnGUI">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinEditorWindow.OnAfterDeserialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinEditorWindow.OnBeforeSerialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.AbstractTypeUnityPropertyDrawer`3">
            <summary>
            Unity property drawer for abstract types.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.AbstractTypeUnityPropertyDrawer`3.#ctor">
            <summary>
            Initializes the property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.AbstractTypeUnityPropertyDrawer`3.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`2},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.OdinEditor">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.OdinEditor.Tree">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinEditor.OnEnable">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinEditor.OnDisable">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinEditor.DrawDefaultInspector">
            <summary>
            Draws the default Odin inspector.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinEditor.DrawUnityInspector">
            <summary>
            Draws the default Unity inspector.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinEditor.GetInspectorWindow">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinEditor.OnInspectorGUI">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinEditor.MockUnityGenericInspector">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.UnityPropertyAttributeDrawer`2">
            <summary>
            Unity property attribute drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyAttributeDrawer`2.#ctor">
            <summary>
            Initializes the drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyAttributeDrawer`2.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,`1,UnityEngine.GUIContent)">
            <summary>
            Draws the proprety.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.CustomDrawerLocator">
            <summary>
            The custom drawer locator system is still in progress, and is kept internal for this reason. Use at your own risk.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.DrawerInfo">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerInfo.DrawerType">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerInfo.DrawnAttributeType">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerInfo.DrawnValueType">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerInfo.OdinDrawerAttribute">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerInfo.Priority">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerInfo.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerInfo.#ctor(System.Type,System.Type,System.Type,Sirenix.OdinInspector.Editor.OdinDrawerAttribute)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.DrawerLocator">
            <summary>
            <para>Utility class for locating and sorting property drawers for the inspector.</para>
            <para>See Odin manual section 'Drawers in Depth' for details on how the DrawerLocator determines which drawers to use.</para>
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerLocator.ExcludeUnityDrawers">
            <summary>
            Odin has its own implementations for these attribute drawers; never use Unity's.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.RegisterCustomDrawerLocator(Sirenix.OdinInspector.Editor.CustomDrawerLocator)">
            <summary>
            <para>
            Registers a custom drawer locator. Note that since drawers are, for now, globally and statically cached,
            if this is registered late then it will not factor into drawer selection.
            </para>
            <para>
            It is advisable to register custom drawer locators using [<see cref="!:InitializeOnLoad"/>].
            </para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetGroupDrawerInfos">
            <summary>
            Get all drawer infos for group drawers.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetAttributeDrawerInfos">
            <summary>
            Get all drawer infos for attribute drawers.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetPropertyDrawerInfos">
            <summary>
            Get all drawer infos for property value drawers.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetAllDrawerInfos">
            <summary>
            Get all drawer infos.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetAttributeDrawers(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets all attribute drawers for a given attribute and value type.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetDrawerPriority(System.Type)">
            <summary>
            Gets the priority of a given drawer type.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetDrawersForInstanceMethod(System.Reflection.MemberInfo)">
            <summary>
            Gets all method drawers for a given declaring type.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetDrawersForMemberInfo(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Get all primary value drawers for a given member info with a given contained value type.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetDrawersForProperty(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Gets all drawers for a given property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetNextDrawer(Sirenix.OdinInspector.Editor.OdinDrawer,Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Gets the next drawer for a given drawer and a given property, if any exists.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetPropertyGroupDrawers(System.Type)">
            <summary>
            Gets all primary drawers for a given property group attribute type.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerLocator.GetValueDrawers(System.Type)">
            <summary>
            Gets all drawers for a given value type.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1">
             <summary>
             <para>
             Base class for all group drawers. Use this class to create your own custom group drawers. OdinGroupDrawer are used to group multiple properties together using an attribute.
             </para>
            
             <para>
             Note that all box group attributes needs to inherit from the <see cref="T:Sirenix.OdinInspector.PropertyGroupAttribute"/>
             </para>
            
             <para>
             Remember to provide your custom drawer with an <see cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/>
             in order for it to be located by the <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/>.
             </para>
            
             </summary>
            
             <remarks>
             Checkout the manual for more information.
             </remarks>
            
             <example>
             <code>
             [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property | AttributeTargets.Method, AllowMultiple = false, Inherited = true)]
             public class MyBoxGroupAttribute : PropertyGroupAttribute
             {
                 public MyBoxGroupAttribute(string group, int order = 0) : base(group, order)
                 {
                 }
             }
            
             // Remember to wrap your custom group drawer within a #if UNITY_EDITOR condition, or locate the file inside an Editor folder.
             [OdinDrawer]
             public class BoxGroupAttributeDrawer : OdinGroupDrawer&lt;MyBoxGroupAttribute&gt;
             {
                 protected override void DrawPropertyGroupLayout(InspectorProperty property, MyBoxGroupAttribute attribute, GUIContent label)
                 {
                     GUILayout.BeginVertical("box");
                     for (int i = 0; i &lt; property.Children.Count; i++)
                     {
                         InspectorUtilities.DrawProperty(property.Children[i]);
                     }
                     GUILayout.EndVertical();
                 }
             }
            
             // Usage:
             public class MyComponent : MonoBehaviour
             {
                 [MyBoxGroup("MyGroup")]
                 public int A;
            
                 [MyBoxGroup("MyGroup")]
                 public int B;
            
                 [MyBoxGroup("MyGroup")]
                 public int C;
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinDrawer"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorUtilities"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.PropertyTree"/>
             <seealso cref="T:Sirenix.Utilities.Editor.GUIHelper"/>
             <seealso cref="T:Sirenix.Utilities.Editor.SirenixEditorGUI"/>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1.GUICallType">
            <summary>
            Drawing properties using GUICallType.GUILayout and overriding DrawPropertyGroupLayout is the default behavior.
            But you can also draw the property group the "good" old Unity way, by overriding and implementing
            GetRectHeight and DrawPropertyGroupRect. Just make sure to override GUICallType as well and return GUICallType.Rect
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1.DrawPropertyImplementation(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.GUIContent)">
            <summary>
            Draws the actual property. This method is called by this.DrawProperty(...)
            </summary>
            <param name="property">The property.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
            <exception cref="T:System.NotImplementedException">Case GUILayout is neither Rect of GUILayout.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1.GetRectHeight(Sirenix.OdinInspector.Editor.InspectorProperty,`0,UnityEngine.GUIContent)">
            <summary>
            Return the GUI height of the property. This method is called by DrawPropertyImplementation if the GUICallType is set to Rect, which is not the default.
            If the GUICallType is set to Rect, both GetRectHeight and DrawPropertyGroupRect needs to be implemented.
            If the GUICallType is set to GUILayout, implementing DrawPropertyGroupLayout will suffice.
            </summary>
            <param name="property">The property.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
            <returns>Returns EditorGUIUtility.singleLineHeight by default.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1.DrawPropertyGroupRect(UnityEngine.Rect,Sirenix.OdinInspector.Editor.InspectorProperty,`0,UnityEngine.GUIContent)">
            <summary>
            Draws the property group in the Rect provided. This method does not support the GUILayout, and is only called by DrawPropertyImplementation if the GUICallType is set to Rect, which is not the default.
            If the GUICallType is set to Rect, both GetRectHeight and DrawPropertyGroupRect needs to be implemented.
            If the GUICallType is set to GUILayout, implementing DrawPropertyGroupLayout will suffice.
            </summary>
            <param name="position">The position rect.</param>
            <param name="property">The property.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1.DrawPropertyGroupLayout(Sirenix.OdinInspector.Editor.InspectorProperty,`0,UnityEngine.GUIContent)">
            <summary>
            Draws the property group with GUILayout support. This method is called from DrawPropertyImplementation if the GUICallType is set to GUILayout, which is the default.
            </summary>
            <param name="property">The property.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.DrawerPriority">
            <summary>
            <para>
            DrawerPriority is used in conjunction with <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>
            to specify the priority of any given drawer. It consists of 3 components:
            Super, Wrapper, Value, where Super is the most significant component,
            and Standard is the least significant component.
            </para>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityLevel"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriority.AutoPriority">
            <summary>
            Auto priority is defined by setting all of the components to zero.
            If no <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/> is defined on a drawer, it will default to AutoPriority.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriority.ValuePriority">
            <summary>
            The standard priority. Mostly used by <see cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>s.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriority.AttributePriority">
            <summary>
            The attribute priority. Mostly used by <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>s.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriority.WrapperPriority">
            <summary>
            The wrapper priority. Mostly used by drawers used to decorate properties.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriority.SuperPriority">
            <summary>
            The super priority. Mostly used by drawers that wants to wrap the entire property but don't draw the actual property.
            These drawers typically don't draw the property itself, and calls CallNextDrawer.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriority.Value">
            <summary>
            The value priority. Mostly used by <see cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>s and <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>s.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriority.Wrapper">
            <summary>
            The wrapper priority. Mostly used by drawers used to decorate properties.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriority.Super">
            <summary>
            The super priority. Mostly used by drawers that wants to wrap the entire property but don't draw the actual property.
            These drawers typically don't draw the property itself, and calls CallNextDrawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.#ctor(Sirenix.OdinInspector.Editor.DrawerPriorityLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriority"/> struct.
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriority"/> struct.
            </summary>
            <param name="super">
            The super priority. Mostly used by drawers that wants to wrap the entire property but don't draw the actual property.
            These drawers typically don't draw the property itself, and calls CallNextDrawer.</param>
            <param name="wrapper">The wrapper priority. Mostly used by drawers used to decorate properties.</param>
            <param name="value">The value priority. Mostly used by <see cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>s and <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>s.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.op_GreaterThan(Sirenix.OdinInspector.Editor.DrawerPriority,Sirenix.OdinInspector.Editor.DrawerPriority)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.op_LessThan(Sirenix.OdinInspector.Editor.DrawerPriority,Sirenix.OdinInspector.Editor.DrawerPriority)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.op_LessThanOrEqual(Sirenix.OdinInspector.Editor.DrawerPriority,Sirenix.OdinInspector.Editor.DrawerPriority)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.op_GreaterThanOrEqual(Sirenix.OdinInspector.Editor.DrawerPriority,Sirenix.OdinInspector.Editor.DrawerPriority)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.op_Addition(Sirenix.OdinInspector.Editor.DrawerPriority,Sirenix.OdinInspector.Editor.DrawerPriority)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.op_Subtraction(Sirenix.OdinInspector.Editor.DrawerPriority,Sirenix.OdinInspector.Editor.DrawerPriority)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.op_Equality(Sirenix.OdinInspector.Editor.DrawerPriority,Sirenix.OdinInspector.Editor.DrawerPriority)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.op_Inequality(Sirenix.OdinInspector.Editor.DrawerPriority,Sirenix.OdinInspector.Editor.DrawerPriority)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.GetPriorityLevel">
            <summary>
            Gets the priority level.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.Equals(Sirenix.OdinInspector.Editor.DrawerPriority)">
            <summary>
            Equals the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriority.CompareTo(Sirenix.OdinInspector.Editor.DrawerPriority)">
            <summary>
            Compares to.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute">
            <summary>
            <para>DrawerPriority is used on inspector drawers and indicates the priority of the drawer.</para>
            <para>Use this to make your custom drawer to come before or after other drawers, and potentially hide other drawers.</para>
            </summary>
            <example>
            <para>The following example shows how DrawerPriority could be apply to a value drawer.</para>
            <code>
            [DrawerPriority(DrawerPriorityLevel.ValuePriority)]
            [OdinDrawer]
            public sealed class MyIntDrawer : InspectorValuePropertyDrawer&lt;int&gt;
            {
            	// ...
            }
            </code>
            </example>
            <example>
            <para>The following example shows how DrawerPriority is used to mark a custom int drawer as a high priority drawer.</para>
            <code>
            [DrawerPriority(1, 0, 0)]
            [OdinDrawer]
            public sealed class MySpecialIntDrawer : InspectorValuePropertyDrawer&lt;int&gt;
            {
            	// ...
            }
            </code>
            </example>
            <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriority"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityLevel"/>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute.Priority">
            <summary>
            The priority of the drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute.#ctor(Sirenix.OdinInspector.Editor.DrawerPriorityLevel)">
            <summary>
            Indicates the priority of an inspector drawer.
            </summary>
            <param name="priority">Option for priority for the inspector drawer.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Indicates the priority of an inspector drawer.
            </summary>
            <param name="super">
            The super priority. Mostly used by drawers that wants to wrap the entire property but don't draw the actual property.
            These drawers typically don't draw the property itself, and calls CallNextDrawer.</param>
            <param name="wrapper">The wrapper priority. Mostly used by drawers used to decorate properties.</param>
            <param name="value">The value priority. Mostly used by <see cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>s and <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>s.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.DrawerPriorityLevel">
            <summary>
            <para>
            DrawerPriorityLevel is used in conjunction with <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriority"/>.
            </para>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriority"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriorityLevel.AutoPriority">
            <summary>
            Auto priority is defined by setting all of the components to zero.
            If no <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/> is defined on a drawer, it will default to AutoPriority.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriorityLevel.ValuePriority">
            <summary>
            The value priority. Mostly used by <see cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>s.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriorityLevel.AttributePriority">
            <summary>
            The attribute priority. Mostly used by <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>s.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriorityLevel.WrapperPriority">
            <summary>
            The wrapper priority. Mostly used by drawers used to decorate properties.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.DrawerPriorityLevel.SuperPriority">
            <summary>
            The super priority. Mostly used by drawers that wants to wrap the entire property but don't draw the actual property.
            These drawers typically don't draw the property itself, and calls CallNextDrawer.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.EmittedMonoBehaviour">
            <summary>
            Base class for emitted MonoBehaviour-derived types that have been created by the <see cref="T:Sirenix.OdinInspector.Editor.UnityPropertyEmitter"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.EmittedMonoBehaviour.BackingFieldInfo">
            <summary>
            The field that backs the value of this MonoBehaviour.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedMonoBehaviour.SetWeakValue(System.Object)">
            <summary>
            Sets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedMonoBehaviour.GetWeakValue">
            <summary>
            Gets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.EmittedMonoBehaviour`1">
            <summary>
            Strongly typed base class for emitted MonoBehaviour-derived types that have been created by the <see cref="T:Sirenix.OdinInspector.Editor.UnityPropertyEmitter"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedMonoBehaviour`1.SetWeakValue(System.Object)">
            <summary>
            Sets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedMonoBehaviour`1.GetWeakValue">
            <summary>
            Gets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedMonoBehaviour`1.SetValue(`0)">
            <summary>
            Sets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedMonoBehaviour`1.GetValue">
            <summary>
            Gets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.EmittedScriptableObject">
            <summary>
            Base class for emitted ScriptableObject-derived types that have been created by the <see cref="T:Sirenix.OdinInspector.Editor.UnityPropertyEmitter"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.EmittedScriptableObject.BackingFieldInfo">
            <summary>
            The field that backs the value of this scriptable object.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedScriptableObject.SetWeakValue(System.Object)">
            <summary>
            Sets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedScriptableObject.GetWeakValue">
            <summary>
            Gets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.EmittedScriptableObject`1">
            <summary>
            Strongly typed base class for emitted scriptable object types that have been created by the <see cref="T:Sirenix.OdinInspector.Editor.UnityPropertyEmitter"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedScriptableObject`1.SetWeakValue(System.Object)">
            <summary>
            Sets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedScriptableObject`1.GetWeakValue">
            <summary>
            Gets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedScriptableObject`1.SetValue(`0)">
            <summary>
            Sets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.EmittedScriptableObject`1.GetValue">
            <summary>
            Gets the value contained in this scriptable object.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.FixUnityAboutWindowBeforeEmit">
            <summary>
            <para>This class fixes Unity's about window, by invoking "UnityEditor.VisualStudioIntegration.UnityVSSupport.GetAboutWindowLabel" before any dynamic assemblies have been defined.</para>
            <para>This is because dynamic assemblies in the current AppDomain break that method, and Unity's about window depends on it.</para>
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.FixUnityAssemblyVersionResolution">
            <summary>
            <para>
            If you mark any of Unity's assemblies with the [AssemblyVersion] attribute to get a rolling assembly
            version that changes sometimes (or all the time), Odin's hardcoded assembly references to user types
            will break.
            </para>
            <para>
            To fix this case, and all other cases of references to wrongly versioned Unity types not being resolved,
            we overload the app domain's type resolution and resolve Unity user assemblies properly regardless of
            version.
            </para>
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.GUICallType">
            <summary>
            Specifies hows any given drawer should drawer the property.
            Changing this behavior, also changes which methods should be overridden in the drawer.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1"/>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.GUICallType.GUILayout">
            <summary>
            GUILayout enabled the use of GUILayout, EditorGUILayout and <see cref="T:Sirenix.Utilities.Editor.SirenixEditorGUI"/>
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.GUICallType.Rect">
            <summary>
            Draws the property using Unity's GUI, and EditorGUI.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1">
             <summary>
             <para>
             Base class for attribute drawers. Use this class to create your own custom attribute drawers that will work for all types.
             Alternatively you can derive from <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/> if you want to only support specific types.
             </para>
            
             <para>
             Remember to provide your custom drawer with an <see cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/>
             in order for it to be located by the <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/>.
             </para>
            
             <para>
             Odin supports the use of GUILayout and takes care of undo for you. It also takes care of multi-selection
             in many simple cases. Checkout the manual for more information on handling multi-selection.
             </para>
            
             <para>
             Also note that Odin does not require that your custom attribute inherits from Unity's PropertyAttribute.
             </para>
             </summary>
            
             <remarks>
             Checkout the manual for more information.
             </remarks>
            
             <example>
             <para>Example using the <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>.</para>
             <code>
             [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)]
             public class CustomRangeAttribute : System.Attribute
             {
                 public float Min;
                 public float Max;
            
                 public CustomRangeAttribute(float min, float max)
                 {
                     this.Min = min;
                     this.Max = max;
                 }
             }
            
             // Remember to wrap your custom attribute drawer within a #if UNITY_EDITOR condition, or locate the file inside an Editor folder.
             [OdinDrawer]
             public sealed class CustomRangeAttributeDrawer : OdinAttributeDrawer&lt;CustomRangeAttribute, float&gt;
             {
                 protected override void DrawPropertyLayout(IPropertyValueEntry&lt;float&gt; entry, CustomRangeAttribute attribute, GUIContent label)
                 {
                     entry.SmartValue = EditorGUILayout.Slider(label, entry.SmartValue, attribute.Min, attribute.Max);
                 }
             }
            
             // Usage:
             public class MyComponent : MonoBehaviour
             {
                 [CustomRangeAttribute(0, 1)]
                 public float MyFloat;
             }
             </code>
             </example>
            
             <example>
             <para>Example using the <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1"/>.</para>
             <code>
             [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)]
             public class GUITintColorAttribute : System.Attribute
             {
                 public Color Color;
            
                 public GUITintColorAttribute(float r, float g, float b, float a = 1)
                 {
                     this.Color = new Color(r, g, b, a);
                 }
             }
            
             // Remember to wrap your custom attribute drawer within a #if UNITY_EDITOR condition, or locate the file inside an Editor folder.
             [OdinDrawer]
             public sealed class GUITintColorAttributeDrawer : OdinAttributeDrawer&lt;GUITintColorAttribute&gt;
             {
                 protected override void DrawPropertyLayout(InspectorProperty property, GUITintColorAttribute attribute, GUIContent label)
                 {
                    Color prevColor = GUI.color;
                    GUI.color *= attribute.Color;
                    this.CallNextDrawer(property, label);
                    GUI.color = prevColor;
                 }
             }
            
             // Usage:
             public class MyComponent : MonoBehaviour
             {
                 [GUITintColor(0, 1, 0)]
                 public float MyFloat;
             }
             </code>
             </example>
            
             <example>
             <para>
             Odin uses multiple drawers to draw any given property, and the order in which these drawers are
             called are defined using the <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>.
             Your custom drawer injects itself into this chain of drawers based on its <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>.
             If no <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/> is defined, a priority is generated automatically based on the type of the drawer.
             Each drawer can ether choose to draw the property or not, or pass on the responsibility to the
             next drawer by calling CallNextDrawer(), as the GUITintColor attribute does in the example above.
             </para>
            
             <para>
             This means that there is no guarantee that your drawer will be called, sins other drawers
             could have a higher priority than yours and choose not to call CallNextDrawer().
             </para>
            
             <para>
             To avoid this, you can tell Odin, that your drawer is a PrependDecorator or an AppendDecorator drawer (see <see cref="!:OdinDrawerBehaviour"/>) as shown in the example shows below.
             Prepend and append decorators are always drawn and are also ordered by the <see cref="!:OdinDrawerBehaviour"/>.
             </para>
            
             <para>
             Note that Odin's <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator" /> have full support for generic class constraints,
             and if that is not enough, you can also add additional type constraints by overriding CanDrawTypeFilter
             </para>
            
             <para>
             Also note that all custom property drawers needs to handle cases where the label provided by the DrawPropertyLayout is null,
             otherwise exceptions will be thrown when in cases where the label is hidden. For instance when [HideLabel] is used, or the property is drawn within a list where labels are also not shown.
             </para>
            
             <code>
             // [OdinDrawer(OdinDrawerBehaviour.DrawProperty)] // default
             // [OdinDrawer(OdinDrawerBehaviour.AppendDecorator)]
             [OdinDrawer(OdinDrawerBehaviour.PrependDecorator)]
             [DrawerPriority(DrawerPriorityLevel.AttributePriority)]
             public sealed class MyCustomAttributeDrawer&lt;T&gt; : OdinAttributeDrawer&lt;MyCustomAttribute, T&gt; where T : class
             {
                 public override bool CanDrawTypeFilter(Type type)
                 {
                     return type != typeof(string);
                 }
            
                 protected override void DrawPropertyLayout(IPropertyValueEntry&lt;T&gt; entry, MyCustomAttribute attribute, GUIContent label)
                 {
                     // Draw property here.
                 }
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinDrawer"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorUtilities"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.PropertyTree"/>
             <seealso cref="T:Sirenix.Utilities.Editor.GUIHelper"/>
             <seealso cref="T:Sirenix.Utilities.Editor.SirenixEditorGUI"/>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1.AllowsMultipleAttributes">
            <summary>
            Tells whether or not multiple attributes are allowed.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1.GUICallType">
            <summary>
            Drawing properties using GUICallType.GUILayout and overriding DrawPropertyLayout is the default behavior.
            But you can also draw the property the "good" old Unity way, by overriding and implementing
            GetRectHeight and DrawPropertyRect. Just make sure to override GUICallType as well and return GUICallType.Rect
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1.DrawPropertyImplementation(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.GUIContent)">
            <summary>
            <para>Draws the actual property.</para>
            <para>This method is called by base.DrawProperty(...) and calls either DrawPropertyLayout or DrawPropertyRect and GetRectHeight depending on the GUICallType.</para>
            </summary>
            <param name="property">The property.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
            <exception cref="T:System.ArgumentNullException">property.</exception>
            <exception cref="T:System.ArgumentException">The property at path '" + property.Path + "' does not have an attribute of type " + typeof(TAttribute).GetNiceName() + ".</exception>
            <exception cref="T:System.NotImplementedException">Case GUILayout is neither Rect of GUILayout.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,`0,UnityEngine.GUIContent)">
            <summary>
            Draws the property with GUILayout support. This method is called by DrawPropertyImplementation if the GUICallType is set to GUILayout, which is the default.
            </summary>
            <param name="property">The property.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1.DrawPropertyRect(UnityEngine.Rect,Sirenix.OdinInspector.Editor.InspectorProperty,`0,UnityEngine.GUIContent)">
            <summary>
            Draws the property in the Rect provided. This method does not support the GUILayout, and is only called by DrawPropertyImplementation if GUICallType is set to Rect which is not the default.
            If the GUICallType is set to Rect, both GetRectHeight and DrawPropertyRect needs to be implemented.
            If GUICallType is set to GUILayout, implementing DrawPropertyLayout will suffice.
            </summary>
            <param name="position">The position rect.</param>
            <param name="property">The property.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1.GetRectHeight(Sirenix.OdinInspector.Editor.InspectorProperty,`0,UnityEngine.GUIContent)">
            <summary>
            Return the GUI height of the property. This method is called by DrawPropertyImplementation if the GUICallType is set to Rect, which is not the default.
            If the GUICallType is set to Rect, both GetRectHeight and DrawPropertyRect needs to be implemented.
            If the GUICallType is set to GUILayout, implementing DrawPropertyLayout will suffice.
            </summary>
            <param name="property">The property.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
            <returns>Returns EditorGUIUtility.singleLineHeight by default.</returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2">
             <summary>
             <para>
             Base class for all type specific attribute drawers. For non-type specific attribute drawers see <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>.
             </para>
            
             <para>
             Remember to provide your custom drawer with an <see cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/>
             in order for it to be located by the <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/>.
             </para>
            
             <para>
             Odin supports the use of GUILayout and takes care of undo for you. It also takes care of multi-selection
             in many simple cases. Checkout the manual for more information on handling multi-selection.
             </para>
            
             <para>
             Also note that Odin does not require that your custom attribute inherits from Unity's PropertyAttribute.
             Furthermore <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator" /> have full support for generic class constraints.
             </para>
             </summary>
            
             <remarks>
             Checkout the manual for more information.
             </remarks>
            
             <example>
             <para>Example using the <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>.</para>
             <code>
             [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)]
             public class CustomRangeAttribute : System.Attribute
             {
                 public float Min;
                 public float Max;
            
                 public CustomRangeAttribute(float min, float max)
                 {
                     this.Min = min;
                     this.Max = max;
                 }
             }
            
             // Remember to wrap your custom attribute drawer within a #if UNITY_EDITOR condition, or locate the file inside an Editor folder.
             [OdinDrawer]
             public sealed class CustomRangeAttributeDrawer : OdinAttributeDrawer&lt;CustomRangeAttribute, float&gt;
             {
                 protected override void DrawPropertyLayout(IPropertyValueEntry&lt;float&gt; entry, CustomRangeAttribute attribute, GUIContent label)
                 {
                     entry.SmartValue = EditorGUILayout.Slider(label, entry.SmartValue, attribute.Min, attribute.Max);
                 }
             }
            
             // Usage:
             public class MyComponent : MonoBehaviour
             {
                 [CustomRangeAttribute(0, 1)]
                 public float MyFloat;
             }
             </code>
             </example>
            
             <example>
             <para>Example using the <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1"/>.</para>
             <code>
             [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)]
             public class GUITintColorAttribute : System.Attribute
             {
                 public Color Color;
            
                 public GUITintColorAttribute(float r, float g, float b, float a = 1)
                 {
                     this.Color = new Color(r, g, b, a);
                 }
             }
            
             // Remember to wrap your custom attribute drawer within a #if UNITY_EDITOR condition, or locate the file inside an Editor folder.
             [OdinDrawer]
             public sealed class GUITintColorAttributeDrawer : OdinAttributeDrawer&lt;GUITintColorAttribute&gt;
             {
                 protected override void DrawPropertyLayout(InspectorProperty property, GUITintColorAttribute attribute, GUIContent label)
                 {
                    Color prevColor = GUI.color;
                    GUI.color *= attribute.Color;
                    this.CallNextDrawer(property, label);
                    GUI.color = prevColor;
                 }
             }
            
             // Usage:
             public class MyComponent : MonoBehaviour
             {
                 [GUITintColor(0, 1, 0)]
                 public float MyFloat;
             }
             </code>
             </example>
            
             <example>
             <para>
             Odin uses multiple drawers to draw any given property, and the order in which these drawers are
             called is defined using the <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>.
             Your custom drawer injects itself into this chain of drawers based on its <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>.
             If no <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/> is defined, a priority is generated automatically based on the type of the drawer.
             Each drawer can ether choose to draw the property or not, or pass on the responsibility to the
             next drawer by calling CallNextDrawer(), as the GUITintColor attribute does in the example above.
             </para>
            
             <para>
             This means that there is no guarantee that your drawer will be called, sins other drawers
             could have a higher priority than yours and choose not to call CallNextDrawer().
             </para>
            
             <para>
             To avoid this, you can tell Odin, that your drawer is a PrependDecorator or an AppendDecorator drawer (see <see cref="!:OdinDrawerBehaviour"/>) as shown in the example shows below.
             Prepend and append decorators are always drawn and are also ordered by the <see cref="!:OdinDrawerBehaviour"/>.
             </para>
            
             <para>
             Note that Odin's <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator" /> have full support for generic class constraints,
             and if that is not enough, you can also add additional type constraints by overriding CanDrawTypeFilter
             </para>
            
             <para>
             Also note that all custom property drawers needs to handle cases where the label provided by the DrawPropertyLayout is null,
             otherwise exceptions will be thrown when in cases where the label is hidden. For instance when [HideLabel] is used, or the property is drawn within a list where labels are also not shown.
             </para>
            
             <code>
             // [OdinDrawer(OdinDrawerBehaviour.DrawProperty)] // default
             // [OdinDrawer(OdinDrawerBehaviour.AppendDecorator)]
             [OdinDrawer(OdinDrawerBehaviour.PrependDecorator)]
             [DrawerPriority(DrawerPriorityLevel.AttributePriority)]
             public sealed class MyCustomAttributeDrawer&lt;T&gt; : OdinAttributeDrawer&lt;MyCustomAttribute, T&gt; where T : class
             {
                 public override bool CanDrawTypeFilter(Type type)
                 {
                     return type != typeof(string);
                 }
            
                 protected override void DrawPropertyLayout(IPropertyValueEntry&lt;T&gt; entry, MyCustomAttribute attribute, GUIContent label)
                 {
                     // Draw property here.
                 }
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinDrawer"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorUtilities"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.PropertyTree"/>
             <seealso cref="T:Sirenix.Utilities.Editor.GUIHelper"/>
             <seealso cref="T:Sirenix.Utilities.Editor.SirenixEditorGUI"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2.DrawPropertyLayout(Sirenix.OdinInspector.Editor.InspectorProperty,`0,UnityEngine.GUIContent)">
            <summary>
            Draws the property with GUILayout support. This method is called by DrawPropertyImplementation if the GUICallType is set to GUILayout, which is the default.
            </summary>
            <param name="property">The property.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
            <exception cref="T:System.ArgumentException">The given property to draw at path '" + property.Path + "' does not have a value of required type " + typeof(IPropertyValueEntry&lt;TValue&gt;).GetNiceName() + ".</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2.DrawPropertyRect(UnityEngine.Rect,Sirenix.OdinInspector.Editor.InspectorProperty,`0,UnityEngine.GUIContent)">
            <summary>
            Draws the property in the Rect provided. This method does not support the GUILayout, and is only called by DrawPropertyImplementation if the GUICallType is set to Rect, which is not the default.
            If the GUICallType is set to Rect, both GetRectHeight and DrawPropertyRect needs to be implemented.
            If the GUICallType is set to GUILayout, implementing DrawPropertyLayout will suffice.
            </summary>
            <param name="position">The position rect.</param>
            <param name="property">The property.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
            <exception cref="T:System.ArgumentException">The given property to draw at path '" + property.Path + "' does not have a value of required type " + typeof(IPropertyValueEntry&lt;TValue&gt;).GetNiceName() + ".</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2.GetRectHeight(Sirenix.OdinInspector.Editor.InspectorProperty,`0,UnityEngine.GUIContent)">
            <summary>
            Return the GUI height of the property. This method is called by DrawPropertyImplementation if the GUICallType is set to Rect, which is not the default.
            If the GUICallType is set to Rect, both GetRectHeight and DrawPropertyRect needs to be implemented.
            If the GUICallType is set to GUILayout, implementing DrawPropertyLayout will suffice.
            </summary>
            <param name="property">The property.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
            <returns>
            Returns EditorGUIUtility.singleLineHeight by default.
            </returns>
            <exception cref="T:System.ArgumentException">The given property to draw at path '" + property.Path + "' does not have a value of required type " + typeof(IPropertyValueEntry&lt;TValue&gt;).GetNiceName() + ".</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`1},`0,UnityEngine.GUIContent)">
            <summary>
            Draws the property with GUILayout support. This method is called from DrawPropertyImplementation if the GUICallType is set to GUILayout, which is the default.
            </summary>
            <param name="entry">The entry.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2.DrawPropertyRect(UnityEngine.Rect,Sirenix.OdinInspector.Editor.IPropertyValueEntry{`1},`0,UnityEngine.GUIContent)">
            <summary>
            Draws the property in the Rect provided. This method does not support the GUILayout, and is only called by DrawPropertyImplementation if the GUICallType is set to Rect, which is not the default.
            If the GUICallType is set to Rect, both GetRectHeight and DrawPropertyRect needs to be implemented.
            If the GUICallType is set to GUILayout, implementing DrawPropertyLayout will suffice.
            </summary>
            <param name="position">The position.</param>
            <param name="entry">The value entry.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2.GetRectHeight(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`1},`0,UnityEngine.GUIContent)">
            <summary>
            Return the GUI height of the property. This method is called from DrawPropertyImplementation if the GUICallType is set to Rect, which is not the default.
            If the GUICallType is set to Rect, both GetRectHeight and DrawPropertyRect needs to be implemented.
            If the GUICallType is set to GUILayout, implementing DrawPropertyLayout will suffice.
            </summary>
            <param name="entry">The value entry.</param>
            <param name="attribute">The attribute.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
            <returns>Returns EditorGUIUtility.singleLineHeight by default.</returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.AllowGUIEnabledForReadonlyAttribute">
            <summary>
            Some drawers don't want to have its GUI disabled, even if the property is read-only or a ReadOnly attribute is defined on the property.
            Use this attribute on any drawer to force GUI being enabled in these cases.
            </summary>
            <example>
            <code>
            [OdinDrawer]
            [AllowGUIEnabledForReadonly]
            public sealed class SomeDrawerDrawer&lt;T&gt; : OdinValueDrawer&lt;T&gt; where T : class
            {
            }
            </code>
            </example>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.OdinDrawer">
            <summary>
            <para>
            Base class for all Odin drawers. In order to create your own custom drawers you need to derive from one of the following drawers:
            </para>
            <list type="bullet">
            <item><see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1"/></item>
            <item><see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/></item>
            <item><see cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/></item>
            <item><see cref="T:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1"/></item>
            </list>
            <para>Remember to provide your custom drawer with an <see cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/> in order for it to be located by the <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/>.</para>
            <para>Drawers require a <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree"/> context, and are instantiated automatically by the <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/>.</para>
            <para>Odin supports the use of GUILayout and takes care of undo for you. It also takes care of multi-selection in many simple cases. Checkout the manual for more information.</para>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorUtilities"/>
            <seealso cref="T:Sirenix.OdinInspector.Editor.PropertyTree"/>
            <seealso cref="T:Sirenix.Utilities.Editor.GUIHelper"/>
            <seealso cref="T:Sirenix.Utilities.Editor.SirenixEditorGUI"/>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.OdinDrawer.AutoSetGUIEnabled">
            <summary>
            If true, not-editable properties will not have its GUI being disabled as otherwise would be the case.
            This is useful if you want some GUI to be enabled regardless of whether a property is read-only or not.
            This value is true when an <see cref="T:Sirenix.OdinInspector.Editor.AllowGUIEnabledForReadonlyAttribute"/> is defined on the drawer class itself.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.OdinDrawer.OdinDrawerAttribute">
            <summary>
            Gets the OdinDrawerAttribute defined on the class. This returns null, if no <see cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/> is defined.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinDrawer.CanDrawTypeFilter(System.Type)">
            <summary>
            <para>Override this method in order to define custom type constraints to specify whether or not a type should be drawn by the drawer.</para>
            <para>Note that Odin's <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator" /> has full support for generic class constraints, so most often you can get away with not overriding CanDrawTypeFilter.</para>
            </summary>
            <param name="type">The type.</param>
            <returns>
            Returns true by default, unless overridden.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinDrawer.DrawProperty(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Draws the property using the default label found in <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty" />
            This method also disables the GUI if the property is read-only and <see cref="P:Sirenix.OdinInspector.Editor.OdinDrawer.AutoSetGUIEnabled" /> is false.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinDrawer.DrawProperty(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.GUIContent)">
            <summary>
            Draws the property with a custom label.
            This method also disables the GUI if the property is read-only and <see cref="P:Sirenix.OdinInspector.Editor.OdinDrawer.AutoSetGUIEnabled" /> is false.
            </summary>
            <param name="property">The property.</param>
            <param name="label">The label. Null is allow if you wish no label should be drawn.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinDrawer.DrawPropertyImplementation(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.GUIContent)">
            <summary>
            Draws the actual property. This method is called by this.DrawProperty(...)
            </summary>
            <param name="property">The property.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinDrawer.CallNextDrawer(Sirenix.OdinInspector.Editor.IPropertyValueEntry,UnityEngine.GUIContent)">
            <summary>
            <para>Calls the next drawer in the drawer chain.</para>
            <para>
            In Odin, multiple drawers are used to draw any given property. This method calls
            the next drawer in the drawer chain provided by the <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator" />.
            The order of the drawer chain is defined using the <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute" />.
            </para>
            </summary>
            <param name="entry">The entry with the property to draw.</param>
            <param name="label">The label. Null is allow if you wish no label should be drawn.</param>
            <returns>Returns true, if a next drawer was called, otherwise a warning message is shown in the inspector and false is returned.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinDrawer.CallNextDrawer(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.GUIContent)">
            <summary>
            <para>Calls the next drawer in the drawer chain.</para>
            <para>
            Odin supports multiple drawers being used to draw any given property. This method calls
            the next drawer in the drawer chain provided by the <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator" />.
            The order of the drawer chain is defined using the <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute" />.
            </para>
            </summary>
            <param name="property">The property.</param>
            <param name="label">The label. Null is allowed if you wish no label to be drawn.</param>
            <returns>Returns true, if a next drawer was called, otherwise a warning message is shown in the inspector and false is returned.</returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.InspectorUtilities">
            <summary>
            Provides a variety of miscellaneous utilities widely used in the inspector.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorUtilities.ConvertToDeepReflectionPath(System.String)">
            <summary>
            Converts an Odin property path to a deep reflection path.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorUtilities.ConvertToUnityPropertyPath(System.String)">
            <summary>
            Converts an Odin property path into a Unity property path.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorUtilities.ConvertToSirenixPropertyPath(System.String)">
            <summary>
            Converts a Unity property path into an Odin property path.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorUtilities.BeginDrawPropertyTree(Sirenix.OdinInspector.Editor.PropertyTree,System.Boolean)">
            <summary>
            Prepares a property tree for drawing, and handles management of undo, as well as marking scenes and drawn assets dirty.
            </summary>
            <param name="tree">The tree to be drawn.</param>
            <param name="withUndo">Whether to register undo commands for the changes made to the tree. This can only be set to true if the tree has a <see cref="T:UnityEditor.SerializedObject"/> to represent.</param>
            <exception cref="T:System.ArgumentNullException">tree is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorUtilities.EndDrawPropertyTree(Sirenix.OdinInspector.Editor.PropertyTree)">
            <summary>
            Ends drawing a property tree, and handles management of undo, as well as marking scenes and drawn assets dirty.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorUtilities.DrawPropertiesInTree(Sirenix.OdinInspector.Editor.PropertyTree)">
            <summary>
            Draws all properties in a given property tree; must be wrapped by a <see cref="M:Sirenix.OdinInspector.Editor.InspectorUtilities.BeginDrawPropertyTree(Sirenix.OdinInspector.Editor.PropertyTree,System.Boolean)"/> and <see cref="M:Sirenix.OdinInspector.Editor.InspectorUtilities.EndDrawPropertyTree(Sirenix.OdinInspector.Editor.PropertyTree)"/>.
            </summary>
            <param name="tree">The tree to be drawn.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorUtilities.DrawProperty(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Draws a property in the inspector.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorUtilities.DrawProperty(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.GUIContent)">
            <summary>
            Draws a property in the inspector using a given label.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1">
             <summary>
             <para>
             Base class for all value drawers. Use this class to create your own custom drawers for any specific type.
             </para>
            
             <para>
             Remember to provide your custom drawer with an <see cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/>
             in order for it to be located by the <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/>.
             </para>
            
             <para>
             Odin supports the use of GUILayout and takes care of undo for you. It also takes care of multi-selection
             in many simple cases. Checkout the manual for more information on handling multi-selection.
             </para>
             </summary>
            
             <remarks>
             Checkout the manual for more information.
             </remarks>
            
             <example>
             <code>
             public class MyCustomBaseType
             {
            
             }
            
             public class MyCustomType : MyCustomBaseType
             {
            
             }
            
             // Remember to wrap your custom attribute drawer within a #if UNITY_EDITOR condition, or locate the file inside an Editor folder.
             [OdinDrawer]
             public sealed class MyCustomBaseTypeDrawer&lt;T&gt; : OdinValueDrawer&lt;T&gt; where T : MyCustomBaseType
             {
                 protected override void DrawPropertyLayout(IPropertyValueEntry&lt;T&gt; entry, GUIContent label)
                 {
                     T value = entry.SmartValue;
                     // Draw your custom drawer here using GUILayout and EditorGUILAyout.
                 }
             }
            
             // Usage:
             // Both values will be drawn using the MyCustomBaseTypeDrawer
             public class MyComponent : SerializedMonoBehaviour
             {
                 public MyCustomBaseType A;
            
                 public MyCustomType B;
             }
             </code>
             </example>
            
             <example>
             <para>
             Odin uses multiple drawers to draw any given property, and the order in which these drawers are
             called are defined using the <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>.
             Your custom drawer injects itself into this chain of drawers based on its <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>.
             If no <see cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/> is defined, a priority is generated automatically based on the type of the drawer.
             Each drawer can ether choose to draw the property or not, or pass on the responsibility to the
             next drawer by calling CallNextDrawer(). An example of this is provided in the documentation for <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>.
             </para>
            
             <para>
             This means that there is no guarantee that your drawer will be called, sins other drawers
             could have a higher priority than yours and choose not to call CallNextDrawer().
             </para>
            
             <para>
             To avoid this, you can tell Odin, that your drawer is a PrependDecorator or an AppendDecorator drawer (see <see cref="!:OdinDrawerBehaviour"/>) as shown in the example shows below.
             Prepend and append decorators are always drawn and are also ordered by the <see cref="!:OdinDrawerBehaviour"/>.
             </para>
            
             <para>
             Note that Odin's <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator" /> have full support for generic class constraints,
             and if that is not enough, you can also add additional type constraints by overriding CanDrawTypeFilter(Type type).
             </para>
            
             <para>
             Also note that all custom property drawers needs to handle cases where the label provided by the DrawPropertyLayout is null,
             otherwise exceptions will be thrown when in cases where the label is hidden. For instance when [HideLabel] is used, or the property is drawn within a list where labels are also not shown.
             </para>
            
             <code>
             // [OdinDrawer(OdinDrawerBehaviour.DrawProperty)] // default
             // [OdinDrawer(OdinDrawerBehaviour.AppendDecorator)]
             [OdinDrawer(OdinDrawerBehaviour.PrependDecorator)]
             [DrawerPriority(DrawerPriorityLevel.AttributePriority)]
             public sealed class MyCustomTypeDrawer&lt;T&gt; : OdinValueDrawer&lt;T&gt; where T : MyCustomType
             {
                 public override bool CanDrawTypeFilter(Type type)
                 {
                     return type != typeof(SomeType);
                 }
            
                 protected override void DrawPropertyLayout(IPropertyValueEntry&lt;T&gt; entry, GUIContent label)
                 {
                     T value = entry.SmartValue;
                     // Draw property here.
                 }
             }
             </code>
             </example>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinDrawer"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.InspectorUtilities"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.PropertyTree"/>
             <seealso cref="T:Sirenix.Utilities.Editor.GUIHelper"/>
             <seealso cref="T:Sirenix.Utilities.Editor.SirenixEditorGUI"/>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.OdinValueDrawer`1.GUICallType">
            <summary>
            Drawing properties using GUICallType.GUILayout and overriding DrawPropertyLayout is the default behavior.
            But you can also draw the property the "good" old Unity way, by overriding and implementing
            GetRectHeight and DrawPropertyRect. Just make sure to override GUICallType as well and return GUICallType.Rect
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinValueDrawer`1.DrawPropertyImplementation(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.GUIContent)">
            <summary>
            Draws the actual property. This method is called by this.DrawProperty(...)
            </summary>
            <param name="property">The property.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
            <exception cref="T:System.ArgumentNullException">property</exception>
            <exception cref="T:System.ArgumentException">The given property to draw at path '" + property.Path + "' does not have a value of required type " + typeof(IPropertyValueEntry).GetNiceName() + ".</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinValueDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property group with GUILayout support. This method is called from DrawPropertyImplementation if the GUICallType is set to GUILayout, which is the default.
            </summary>
            <param name="entry">The entry.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinValueDrawer`1.DrawPropertyRect(UnityEngine.Rect,Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property in the Rect provided. This method does not support the GUILayout, and is only called by DrawPropertyImplementation if the GUICallType is set to Rect, which is not the default.
            If the GUICallType is set to Rect, both GetRectHeight and DrawPropertyRect needs to be implemented.
            If the GUICallType is set to GUILayout, implementing DrawPropertyLayout will suffice.
            </summary>
            <param name="position">The position.</param>
            <param name="entry">The entry.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinValueDrawer`1.GetRectHeight(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Return the GUI height of the property. This method is called by DrawPropertyImplementation if the GUICallType is set to Rect, which is not the default.
            If the GUICallType is set to Rect, both GetRectHeight and DrawPropertyRect needs to be implemented.
            If the GUICallType is set to GUILayout, implementing DrawPropertyLayout will suffice.
            </summary>
            <param name="entry">The entry.</param>
            <param name="label">The label. This can be null, so make sure your drawer supports that.</param>
            <returns>Returns EditorGUIUtility.singleLineHeight by default.</returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.ITemporaryContext">
            <summary>
            Custom types used by the <see cref="T:Sirenix.OdinInspector.Editor.TemporaryPropertyContext`1"/> can choose to implement the ITemporaryContext
            interface in order to be notified when the context gets reset.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.ITemporaryContext.Reset">
            <summary>
            Called by <see cref="T:Sirenix.OdinInspector.Editor.TemporaryPropertyContext`1"/> when the context gets reset.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IValueGetterSetter">
            <summary>
            Used by all InspectorProperty to tell Odin how to set or get a value on any given property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IValueGetterSetter.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="owner">The owner.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IValueGetterSetter.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="owner">The owner.</param>
            <returns></returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IValueGetterSetter`2">
            <summary>
            Used by all <see cref="T:Sirenix.OdinInspector.Editor.AliasGetterSetter`4"/> to tell Odin how to set or get a value on any given property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IValueGetterSetter`2.SetValue(`0@,`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="owner">The owner.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IValueGetterSetter`2.GetValue(`0@)">
            <summary>
            Gets the value.
            </summary>
            <param name="owner">The owner.</param>
            <returns></returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute">
             <summary>
             <para>When creating custom property drawers with <see cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/> or <see cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/> etc,
             an OdinDrawerAttribute must be defined on the custom drawer class itself in order to specify that the drawer is meant to be included in the inspector.</para>
             <para>If no OdinDrawerAttribute is defined, the <see cref="T:Sirenix.OdinInspector.Editor.DrawerLocator"/> will ignore your drawer.</para>
             </summary>
             <remarks>
             Checkout the manual for more information.
             </remarks>
             <example>
             <code>
             [OdinDrawer] // Specify that this drawer must be included in the inspector; without this, it will not be drawn
             public class MyCustomTypeDrawer&lt;T&gt; : OdinValueDrawer&lt;T&gt; where T : MyCustomBaseType
             {
                 protected override void DrawPropertyLayout(IPropertyValueEntry&lt;T&gt; entry, GUIContent label)
                 {
                     T value = entry.SmartValue;
                     // Draw property here.
            
                     // Optionally, call the next drawer in line.
                     this.CallNextDrawer(entry, label);
                 }
             }
             </code>
             </example>
             <seealso cref="!:OdinDrawerBehaviour"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinAttributeDrawer`2"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinValueDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinGroupDrawer`1"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.OdinDrawer"/>
             <seealso cref="T:Sirenix.OdinInspector.Editor.DrawerPriorityAttribute"/>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinDrawerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.OdinDrawerAttribute"/> class.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PrimitiveCompositeDrawer`1">
            <summary>
            Property drawer for primitive composite properties.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PrimitiveCompositeDrawer`1.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PrimitiveCompositeDrawer`1.DrawPropertyField(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0},UnityEngine.GUIContent)">
            <summary>
            Draws the property field.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.ComplexTypePropertyChildren">
            <summary>
            Represents children for a property of a complex type; a type with several "child members" to represent.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.ComplexTypePropertyChildren.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.ComplexTypePropertyChildren"/> class.
            </summary>
            <param name="property">The property to handle children for.</param>
            <exception cref="T:System.ArgumentException">
            Property to create complex type children for has no value entry.
            or
            Property must be either a reference type or a value type property.
            </exception>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.ComplexTypePropertyChildren.ComplexType">
            <summary>
            The complex type that this instance represents.
            </summary>
            <value>
            The type of the complex.
            </value>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.ComplexTypePropertyChildren.IsCollection">
            <summary>
            Whether this <see cref="T:Sirenix.OdinInspector.Editor.PropertyChildren" /> instance represents the elements of a collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.ComplexTypePropertyChildren.ActualCount">
            <summary>
            The actual number of children; this is different from <see cref="!:Count" />, in that <see cref="!:Count" /> will be 0 if <see cref="M:Sirenix.OdinInspector.Editor.ComplexTypePropertyChildren.GetAllowChildren" /> is false.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.ComplexTypePropertyChildren.GetAllowChildren">
            <summary>
            Determines whether to allow children on the property or not.
            </summary>
            <returns>
            Whether to allow children on the property or not.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.ComplexTypePropertyChildren.GetPathImplementation(System.Int32)">
            <summary>
            The implementaton that calculates a path for a given index.
            </summary>
            <param name="index">The index to calculate a path for.</param>
            <returns>
            The calculated path.
            </returns>
            <exception cref="T:System.ArgumentException">A dictionary element cannot have more than two children; invalid index '" + index + "'.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.ComplexTypePropertyChildren.CreateChild(System.Int32)">
            <summary>
            Creates a child property for the given index.
            </summary>
            <param name="index">The index to create a child for.</param>
            <returns>
            The created child.
            </returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.DisabledPropertyChildren">
            <summary>
            Represents children for a property where children are disabled. This will never contain any children.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DisabledPropertyChildren.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.DisabledPropertyChildren"/> class.
            </summary>
            <param name="property">The property to handle children for.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.DisabledPropertyChildren.ActualCount">
            <summary>
            The actual number of children; this is different from <see cref="!:Count" />, in that <see cref="!:Count" /> will be 0 if <see cref="M:Sirenix.OdinInspector.Editor.DisabledPropertyChildren.GetAllowChildren" /> is false.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.DisabledPropertyChildren.IsCollection">
            <summary>
            Whether this <see cref="T:Sirenix.OdinInspector.Editor.PropertyChildren" /> instance represents the elements of a collection.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DisabledPropertyChildren.GetAllowChildren">
            <summary>
            Determines whether to allow children on the property or not.
            </summary>
            <returns>
            Whether to allow children on the property or not.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DisabledPropertyChildren.GetPathImplementation(System.Int32)">
            <summary>
            The implementaton that calculates a path for a given index.
            </summary>
            <param name="index">The index to calculate a path for.</param>
            <returns>
            The calculated path.
            </returns>
            <exception cref="T:System.NotSupportedException">Cannot get child paths for properties that cannot have children.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.DisabledPropertyChildren.CreateChild(System.Int32)">
            <summary>
            Creates a child property for the given index.
            </summary>
            <param name="index">The index to create a child for.</param>
            <returns>
            The created child.
            </returns>
            <exception cref="T:System.NotSupportedException">Cannot create children for properties that cannot have children.</exception>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.GroupPropertyChildren">
            <summary>
            Represents the members of a property group as children.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.GroupPropertyChildren.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.GroupPropertyChildren"/> class.
            </summary>
            <param name="property">The property to handle children for.</param>
            <exception cref="T:System.ArgumentException">Given property info must be of type group.</exception>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GroupPropertyChildren.ActualCount">
            <summary>
            The actual number of children; this is different from <see cref="!:Count" />, in that <see cref="!:Count" /> will be 0 if <see cref="M:Sirenix.OdinInspector.Editor.GroupPropertyChildren.GetAllowChildren" /> is false.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GroupPropertyChildren.IsCollection">
            <summary>
            Whether this <see cref="T:Sirenix.OdinInspector.Editor.PropertyChildren" /> instance represents the elements of a collection.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.GroupPropertyChildren.GetAllowChildren">
            <summary>
            Determines whether to allow children on the property or not.
            </summary>
            <returns>
            Whether to allow children on the property or not.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.GroupPropertyChildren.GetPathImplementation(System.Int32)">
            <summary>
            The implementaton that calculates a path for a given index.
            </summary>
            <param name="index">The index to calculate a path for.</param>
            <returns>
            The calculated path.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.GroupPropertyChildren.CreateChild(System.Int32)">
            <summary>
            Creates a child property for the given index.
            </summary>
            <param name="index">The index to create a child for.</param>
            <returns>
            The created child.
            </returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IEditableListPropertyChildren">
            <summary>
            Represents an instance of <see cref="T:Sirenix.OdinInspector.Editor.PropertyChildren"/> that can be edited after creation - such as children for lists and arrays.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IEditableListPropertyChildren.InsertSpaceAt(System.Int32)">
            <summary>
            Insert space for a child at the given index.
            </summary>
            <param name="index">The index to insert a space at.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IEditableListPropertyChildren.RemoveChildAt(System.Int32)">
            <summary>
            Remove the child at the given index.
            </summary>
            <param name="index">The index to remove a child at.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.ListPropertyChildren">
            <summary>
            Represents the children of a list property.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.ListPropertyChildren.count">
            <summary>
            The count of children.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.ListPropertyChildren.maxListChildCount">
            <summary>
            The largest count of a list in this property (for multi-selection).
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.ListPropertyChildren.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.ListPropertyChildren"/> class.
            </summary>
            <param name="property">The property to handle children for.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.ListPropertyChildren.IsCollection">
            <summary>
            Whether this <see cref="T:Sirenix.OdinInspector.Editor.PropertyChildren" /> instance represents the elements of a collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.ListPropertyChildren.ActualCount">
            <summary>
            The actual number of children; this is different from <see cref="!:Count" />, in that <see cref="!:Count" /> will be 0 if <see cref="M:Sirenix.OdinInspector.Editor.ListPropertyChildren.GetAllowChildren" /> is false.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.ListPropertyChildren.MaxListChildCount">
            <summary>
            Gets the maximum list child count.
            </summary>
            <value>
            The maximum list child count.
            </value>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.ListPropertyChildren.GetAllowChildren">
            <summary>
            Determines whether to allow children on the property or not.
            </summary>
            <returns>
            Whether to allow children on the property or not.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.ListPropertyChildren.GetPathImplementation(System.Int32)">
            <summary>
            The implementaton that calculates a path for a given index.
            </summary>
            <param name="index">The index to calculate a path for.</param>
            <returns>
            The calculated path.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.ListPropertyChildren.CreateChild(System.Int32)">
            <summary>
            Creates a child property for the given index.
            </summary>
            <param name="index">The index to create a child for.</param>
            <returns>
            The created child.
            </returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyChildren">
            <summary>
            Represents the children of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyChildren.Property">
            <summary>
            The <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/> that this instance handles children for.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyChildren.Item(System.Int32)">
            <summary>
            Gets a child by index. This is an alias for <see cref="M:Sirenix.OdinInspector.Editor.PropertyChildren.Get(System.Int32)" />.
            </summary>
            <param name="index">The index of the child to get.</param>
            <returns>The child at the given index.</returns>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyChildren.Item(System.String)">
            <summary>
            Gets a child by name. This is an alias for <see cref="M:Sirenix.OdinInspector.Editor.PropertyChildren.Get(System.String)" />.
            </summary>
            <param name="name">The name of the child to get.</param>
            <returns>The child, if a child was found; otherwise, null.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyChildren"/> class.
            </summary>
            <param name="property">The property to handle children for.</param>
            <exception cref="T:System.ArgumentNullException">property is null</exception>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyChildren.Count">
            <summary>
            The number of children on the property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyChildren.ActualCount">
            <summary>
            The actual number of children; this is different from <see cref="P:Sirenix.OdinInspector.Editor.PropertyChildren.Count"/>, in that <see cref="P:Sirenix.OdinInspector.Editor.PropertyChildren.Count"/> will be 0 if <see cref="M:Sirenix.OdinInspector.Editor.PropertyChildren.GetAllowChildren"/> is false.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyChildren.IsCollection">
            <summary>
            Whether this <see cref="T:Sirenix.OdinInspector.Editor.PropertyChildren"/> instance represents the elements of a collection.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.Update">
            <summary>
            Updates this instance of <see cref="T:Sirenix.OdinInspector.Editor.PropertyChildren"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.UpdateCount">
            <summary>
            Updates the child count of the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.Get(System.String)">
            <summary>
            Gets a child by name.
            </summary>
            <param name="name">The name of the child to get.</param>
            <returns>The child, if a child was found; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.Get(System.Int32)">
            <summary>
            Gets a child by index.
            </summary>
            <param name="index">The index of the child to get.</param>
            <returns>
            The child at the given index.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The given index was out of range.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.GetPath(System.Int32)">
            <summary>
            Gets the path of the child at a given index.
            </summary>
            <param name="index">The index to get the path of.</param>
            <returns>The path of the child at the given index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The given index was out of range.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.Recurse">
            <summary>
            Returns an IEnumerable that recursively yields all children of the property, depth first.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.CreateChild(System.Int32)">
            <summary>
            Creates a child property for the given index.
            </summary>
            <param name="index">The index to create a child for.</param>
            <returns>The created child.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.GetAllowChildren">
            <summary>
            Determines whether to allow children on the property or not.
            </summary>
            <returns>Whether to allow children on the property or not.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.GetPathImplementation(System.Int32)">
            <summary>
            The implementaton that calculates a path for a given index.
            </summary>
            <param name="index">The index to calculate a path for.</param>
            <returns>The calculated path.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.InsertSpaceAt(System.Int32)">
            <summary>
            Insert space for a child at the given index.
            </summary>
            <param name="index">The index to insert a space at.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyChildren.RemoveChildAt(System.Int32)">
            <summary>
            Remove the child at the given index.
            </summary>
            <param name="index">The index to remove a child at.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyValueCollection">
            <summary>
            Represents a weakly typed collection of values for a <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry"/> - one value per selected inspector target.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueCollection.Property">
            <summary>
            The property whose values are represented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueCollection"/> class.
            </summary>
            <param name="property">The property to represent.</param>
            <exception cref="T:System.ArgumentNullException">property is null</exception>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection.AreDirty">
            <summary>
            Whether the values have been changed since <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.MarkClean" /> was last called.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection.Count">
            <summary>
            The number of values in the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether this instance is synchronized.
            </summary>
            <value>
              <c>true</c> if this instance is synchronized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection.SyncRoot">
            <summary>
            Gets the synchronization root object.
            </summary>
            <value>
            The synchronization root object.
            </value>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection.WeakOriginal">
            <summary>
            The original values of the (loosely typed) value collection, such as they were immediately after the last <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update"/> call.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection.Item(System.Int32)">
            <summary>
            Gets or sets the weakly typed <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:System.Object"/> value.
            </value>
            <param name="index">The index to set.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.MarkClean">
            <summary>
            Marks the value collection as being clean again. This is typically called at the end of the current GUI frame, during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ApplyChanges" />.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.RevertUnappliedValues">
            <summary>
            Reverts the value collection to its origin values (found in <see cref="!:Original" />) from the last <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update" /> call, and marks the value collection as being clean again.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the collection contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="index">The index to copy from.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.IndexOf(System.Object)">
            <summary>
            Gets the index of the given value, or -1 if the value was not found.
            </summary>
            <param name="value">The value to get the index of.</param>
            <returns>The index of the given value, or -1 if the value was not found.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.GetWeakValue(System.Int32)">
            <summary>
            Gets the weakly typed value at the given index.
            </summary>
            <param name="index">The index of the value to get.</param>
            <returns>The weakly typed value at the given index</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.SetWeakValue(System.Int32,System.Object)">
            <summary>
            Sets the weakly typed value at the given index.
            </summary>
            <param name="index">The index to set the value of.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.ForceSetValue(System.Int32,System.Object)">
            <summary>
            <para>Force sets the value, ignoring whether it is editable or not.</para>
            <para>Note that this will fail on list element value entries where <see cref="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ListIsReadOnly" /> is true on the parent value entry.</para>
            </summary>
            <param name="index">The selection index of the value.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection.ForceMarkDirty">
            <summary>
            Marks the value collection as being dirty, regardless of any value changes.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyValueCollection`1">
            <summary>
            Represents a strongly typed collection of values for a <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry`1" /> - one value per selected inspector target.
            </summary>
            <typeparam name="TValue">The element type of the collection.</typeparam>
            <seealso cref="T:Sirenix.OdinInspector.Editor.IPropertyValueCollection" />
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty,`0[],`0[],`0[],`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueCollection`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="internalArray">The internal array.</param>
            <param name="originalArray">The original array.</param>
            <param name="atomArray">The internal atom array.</param>
            <param name="originalAtomArray">The original atom array.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.AreDirty">
            <summary>
            Whether the values have been changed since <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.MarkClean" /> was last called.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.Count">
            <summary>
            The number of values in the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether this instance is synchronized.
            </summary>
            <value>
              <c>true</c> if this instance is synchronized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.SyncRoot">
            <summary>
            Gets the synchronization root object.
            </summary>
            <value>
            The synchronization root object.
            </value>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.WeakOriginal">
            <summary>
            The original values of the (loosely typed) value collection, such as they were immediately after the last <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update" /> call.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:TValue"/> at the specified index.
            </summary>
            <value>
            The <see cref="!:TValue"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.MarkClean">
            <summary>
            Marks the value collection as being clean again. This is typically called at the end of the current GUI frame, during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ApplyChanges" />.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.RevertUnappliedValues">
            <summary>
            Reverts the value collection to its origin values (found in <see cref="!:Original" />) from the last <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update" /> call, and marks the value collection as being clean again.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="index">The index to copy from.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.GetWeakValue(System.Int32)">
            <summary>
            Gets the weakly typed value at the given index.
            </summary>
            <param name="index">The index of the value to get.</param>
            <returns>
            The weakly typed value at the given index
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.SetWeakValue(System.Int32,System.Object)">
            <summary>
            Sets the weakly typed value at the given index.
            </summary>
            <param name="index">The index to set the value of.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.Contains(System.Object)">
            <summary>
            Determines whether the collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the collection contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.IndexOf(System.Object)">
            <summary>
            Gets the index of the given value, or -1 if the value was not found.
            </summary>
            <param name="value">The value to get the index of.</param>
            <returns>
            The index of the given value, or -1 if the value was not found.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.ForceSetValue(System.Int32,System.Object)">
            <summary>
            <para>Force sets the value, ignoring whether it is editable or not.</para>
            <para>Note that this will fail on list element value entries where <see cref="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ListIsReadOnly" /> is true on the parent value entry.</para>
            </summary>
            <param name="index">The selection index of the value.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.ForceSetValue(System.Int32,`0)">
            <summary>
            <para>Force sets the value, ignoring whether it is editable or not.</para>
            <para>Note that this will fail on list element value entries where <see cref="M:Sirenix.OdinInspector.Editor.IPropertyValueEntry.ListIsReadOnly" /> is true on the parent value entry.</para>
            </summary>
            <param name="index">The selection index of the value.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueCollection`1.ForceMarkDirty">
            <summary>
            Marks the value collection as being dirty, regardless of any value changes.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.StrongListPropertyChildren`2">
            <summary>
            Represents the children of a strongly typed list (<see cref="T:System.Collections.Generic.IList`1"/>) property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.StrongListPropertyChildren`2.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.StrongListPropertyChildren`2.UpdateCount">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.WeakListPropertyChildren">
            <summary>
            Represents the children of a weakly typed list (<see cref="T:System.Collections.IList"/>) property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.WeakListPropertyChildren.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.WeakListPropertyChildren"/> class.
            </summary>
            <param name="property">The property to handle children for.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.WeakListPropertyChildren.UpdateCount">
            <summary>
            Updates the child count of the property.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Property with list children has no value entry.
            or
            Property with list children has a value entry with non-list values in it.
            </exception>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyContext`1">
            <summary>
            <para>A contextual value attached to an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>, mapped to a key, contained in a <see cref="T:Sirenix.OdinInspector.Editor.PropertyContextContainer"/>.</para>
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyContext`1.Value">
            <summary>
            The contained value.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContext`1.Create">
            <summary>
            Creates a new PropertyContext.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContext`1.op_Explicit(Sirenix.OdinInspector.Editor.PropertyContext{`0})~`0">
            <summary>
            Performs an explicit conversion from <see cref="T:Sirenix.OdinInspector.Editor.PropertyContext`1"/> to <see cref="!:T"/>.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContext`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance, of the format "<see cref="T:Sirenix.OdinInspector.Editor.PropertyContext`1"/>: Value.ToString()".
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyContextContainer">
            <summary>
            <para>Contains a context for an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>, which offers the ability to address persistent values by key across several editor GUI frames.</para>
            <para>Use this in drawers to store contextual editor-only values such as the state of a foldout.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.#ctor(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyContextContainer"/> class.
            </summary>
            <param name="property">The property.</param>
            <exception cref="T:System.ArgumentNullException">property</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetGlobalTemporary``1(System.String,System.Func{``0})">
            <summary>
            <para>Gets a global temporary context value for a given key, using a given delegate to generate a default value if the context doesn't already exist.</para>
            <para>Global contexts are not associated with any one specific drawer, and so are shared across all drawers for this property.</para>
            </summary>
            <typeparam name="T">The type of the context value to get.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <param name="getDefaultValue">A delegate for generating a default value.</param>
            <returns>The found context.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetGlobalTemporary``1(System.String,``0)">
            <summary>
            <para>Gets a global temporary context value for a given key, using a given default value if the context doesn't already exist.</para>
            <para>Global contexts are not associated with any one specific drawer, and so are shared across all drawers for this property.</para>
            </summary>
            <typeparam name="T">The type of the context value to get.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <param name="defaultValue">The default value to set if the context value doesn't exist yet.</param>
            <returns>The found context.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetGlobalTemporary``1(System.String)">
            <summary>
            <para>Gets a global temporary context value for a given key, and creates a new instance of <see cref="!:T"/> as a default value if the context doesn't already exist.</para>
            <para>Global contexts are not associated with any one specific drawer, and so are shared across all drawers for this property.</para>
            </summary>
            <typeparam name="T">The type of the context value to get.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <returns>The found context.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetGlobal``1(System.String,System.Func{``0})">
            <summary>
            <para>Gets a global context value for a given key, using a given delegate to generate a default value if the context doesn't already exist.</para>
            <para>Global contexts are not associated with any one specific drawer, and so are shared across all drawers for this property.</para>
            </summary>
            <typeparam name="T">The type of the context value to get.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <param name="getDefaultValue">A delegate for generating a default value.</param>
            <returns>The found context.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetGlobal``1(System.String,``0)">
            <summary>
            <para>Gets a global context value for a given key, using a given default value if the context doesn't already exist.</para>
            <para>Global contexts are not associated with any one specific drawer, and so are shared across all drawers for this property.</para>
            </summary>
            <typeparam name="T">The type of the context value to get.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <param name="defaultValue">The default value to set if the context value doesn't exist yet.</param>
            <returns>The found context.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetGlobal``1(System.String)">
            <summary>
            <para>Gets a global context value for a given key, and creates a new instance of <see cref="!:T"/> as a default value if the context doesn't already exist.</para>
            <para>Global contexts are not associated with any one specific drawer, and so are shared across all drawers for this property.</para>
            </summary>
            <typeparam name="T">The type of the context value to get.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <returns>The found context.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``1(Sirenix.OdinInspector.Editor.OdinDrawer,System.String,System.Func{``0})">
            <summary>
            <para>Gets a context value local to a drawer type for a given key, using a given delegate to generate a default value if the context doesn't already exist.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerInstance">An instance of the drawer type linked to the context value to get.</param>
            <param name="key">The key of the context value to get.</param>
            <param name="getDefaultValue">A delegate for generating a default value.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``2(System.String,System.Func{``0})">
            <summary>
            <para>Gets a context value local to a drawer type for a given key, using a given delegate to generate a default value if the context doesn't already exist.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TDrawer">The type of the drawer.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <param name="getDefaultValue">A delegate for generating a default value.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``1(System.Type,System.String,System.Func{``0})">
            <summary>
            <para>Gets a context value local to a drawer type for a given key, using a given delegate to generate a default value if the context doesn't already exist.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerType">The type of the drawer.</param>
            <param name="key">The key of the context value to get.</param>
            <param name="getDefaultValue">A delegate for generating a default value.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``1(Sirenix.OdinInspector.Editor.OdinDrawer,System.String,``0)">
            <summary>
            <para>Gets a context value local to a drawer type for a given key, using a given default value if the context doesn't already exist.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerInstance">An instance of the drawer type linked to the context value to get.</param>
            <param name="key">The key of the context value to get.</param>
            <param name="defaultValue">The default value to set if the context value doesn't exist yet.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``2(System.String,``0)">
            <summary>
            <para>Gets a context value local to a drawer type for a given key, using a given default value if the context doesn't already exist.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TDrawer">The type of the drawer.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <param name="defaultValue">The default value to set if the context value doesn't exist yet.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``1(System.Type,System.String,``0)">
            <summary>
            <para>Gets a context value local to a drawer type for a given key, using a given default value if the context doesn't already exist.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerType">The type of the drawer.</param>
            <param name="key">The key of the context value to get.</param>
            <param name="defaultValue">The default value to set if the context value doesn't exist yet.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``1(Sirenix.OdinInspector.Editor.OdinDrawer,System.String)">
            <summary>
            Gets a context value local to a drawer type for a given key, and creates a new instance of <see cref="!:T" /> as a default value if the context doesn't already exist.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerInstance">An instance of the drawer type linked to the context value to get.</param>
            <param name="key">The key of the context value to get.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``2(System.String)">
            <summary>
            Gets a context value local to a drawer type for a given key, and creates a new instance of <see cref="!:T" /> as a default value if the context doesn't already exist.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TDrawer">The type of the drawer.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``1(System.Type,System.String)">
            <summary>
            Gets a context value local to a drawer type for a given key, and creates a new instance of <see cref="!:T" /> as a default value if the context doesn't already exist.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerType">The type of the drawer.</param>
            <param name="key">The key of the context value to get.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``1(Sirenix.OdinInspector.Editor.OdinDrawer,System.String,``0@)">
            <summary>
            Gets a context value local to a drawer type for a given key, and creates a new instance of <see cref="!:T" />
            as a default value if the context doesn't already exist.
            </summary>
            <returns>Returns true if a new context was created.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``1(Sirenix.OdinInspector.Editor.OdinDrawer,System.String,Sirenix.OdinInspector.Editor.PropertyContext{``0}@)">
            <summary>
            Gets a context value local to a drawer type for a given key, and creates a new instance of <see cref="!:T" />
            as a default value if the context doesn't already exist.
            </summary>
            <returns>Returns true if a new context was created.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``1(System.Type,System.String,Sirenix.OdinInspector.Editor.PropertyContext{``0}@)">
            <summary>
            Gets a context value local to a drawer type for a given key, and creates a new instance of <see cref="!:T" />
            as a default value if the context doesn't already exist.
            </summary>
            <returns>Returns true if a new context was created.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.Get``2(System.String,Sirenix.OdinInspector.Editor.PropertyContext{``0}@)">
            <summary>
            Gets a context value local to a drawer type for a given key, and creates a new instance of <see cref="!:T" />
            as a default value if the context doesn't already exist.
            </summary>
            <returns>Returns true if a new context was created.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetTemporary``1(Sirenix.OdinInspector.Editor.OdinDrawer,System.String,System.Func{``0})">
            <summary>
            <para>Gets a temporary context value local to a drawer type for a given key, using a given delegate to generate a default value if the context doesn't already exist.</para>
            <para>Temporary context values are reset at the start of every GUI frame; arrays are set to default values, collections are cleared, and context types that implement <see cref="T:Sirenix.OdinInspector.Editor.ITemporaryContext"/> have <see cref="M:Sirenix.OdinInspector.Editor.ITemporaryContext.Reset"/> called.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerInstance">An instance of the drawer type linked to the context value to get.</param>
            <param name="key">The key of the context value to get.</param>
            <param name="getDefaultValue">A delegate for generating a default value.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetTemporary``2(System.String,System.Func{``0})">
            <summary>
            <para>Gets a temporary context value local to a drawer type for a given key, using a given delegate to generate a default value if the context doesn't already exist.</para>
            <para>Temporary context values are reset at the start of every GUI frame; arrays are set to default values, collections are cleared, and context types that implement <see cref="T:Sirenix.OdinInspector.Editor.ITemporaryContext" /> have <see cref="M:Sirenix.OdinInspector.Editor.ITemporaryContext.Reset" /> called.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TDrawer">The type of the drawer.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <param name="getDefaultValue">A delegate for generating a default value.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetTemporary``1(System.Type,System.String,System.Func{``0})">
            <summary>
            <para>Gets a temporary context value local to a drawer type for a given key, using a given delegate to generate a default value if the context doesn't already exist.</para>
            <para>Temporary context values are reset at the start of every GUI frame; arrays are set to default values, collections are cleared, and context types that implement <see cref="T:Sirenix.OdinInspector.Editor.ITemporaryContext" /> have <see cref="M:Sirenix.OdinInspector.Editor.ITemporaryContext.Reset" /> called.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerType">The type of the drawer.</param>
            <param name="key">The key of the context value to get.</param>
            <param name="getDefaultValue">A delegate for generating a default value.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetTemporary``1(Sirenix.OdinInspector.Editor.OdinDrawer,System.String,``0)">
            <summary>
            <para>Gets a temporary context value local to a drawer type for a given key, using a given default value if the context doesn't already exist.</para>
            <para>Temporary context values are reset at the start of every GUI frame; arrays are set to default values, collections are cleared, and context types that implement <see cref="T:Sirenix.OdinInspector.Editor.ITemporaryContext"/> have <see cref="M:Sirenix.OdinInspector.Editor.ITemporaryContext.Reset"/> called.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerInstance">An instance of the drawer type linked to the context value to get.</param>
            <param name="key">The key of the context value to get.</param>
            <param name="defaultValue">The default value to set if the context value doesn't exist yet.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetTemporary``2(System.String,``0)">
            <summary>
            <para>Gets a temporary context value local to a drawer type for a given key, using a given default value if the context doesn't already exist.</para>
            <para>Temporary context values are reset at the start of every GUI frame; arrays are set to default values, collections are cleared, and context types that implement <see cref="T:Sirenix.OdinInspector.Editor.ITemporaryContext" /> have <see cref="M:Sirenix.OdinInspector.Editor.ITemporaryContext.Reset" /> called.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TDrawer">The type of the drawer.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <param name="defaultValue">The default value to set if the context value doesn't exist yet.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetTemporary``1(System.Type,System.String,``0)">
            <summary>
            <para>Gets a temporary context value local to a drawer type for a given key, using a given default value if the context doesn't already exist.</para>
            <para>Temporary context values are reset at the start of every GUI frame; arrays are set to default values, collections are cleared, and context types that implement <see cref="T:Sirenix.OdinInspector.Editor.ITemporaryContext" /> have <see cref="M:Sirenix.OdinInspector.Editor.ITemporaryContext.Reset" /> called.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerType">The type of the drawer.</param>
            <param name="key">The key of the context value to get.</param>
            <param name="defaultValue">The default value to set if the context value doesn't exist yet.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetTemporary``1(Sirenix.OdinInspector.Editor.OdinDrawer,System.String)">
            <summary>
            <para>Gets a temporary context value local to a drawer type for a given key, and creates a new instance of <see cref="!:T" /> as a default value if the context doesn't already exist.</para>
            <para>Temporary context values are reset at the start of every GUI frame; arrays are set to default values, collections are cleared, and context types that implement <see cref="T:Sirenix.OdinInspector.Editor.ITemporaryContext" /> have <see cref="M:Sirenix.OdinInspector.Editor.ITemporaryContext.Reset" /> called.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerInstance">An instance of the drawer type linked to the context value to get.</param>
            <param name="key">The key of the context value to get.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetTemporary``2(System.String)">
            <summary>
            <para>Gets a temporary context value local to a drawer type for a given key, and creates a new instance of <see cref="!:T" /> as a default value if the context doesn't already exist.</para>
            <para>Temporary context values are reset at the start of every GUI frame; arrays are set to default values, collections are cleared, and context types that implement <see cref="T:Sirenix.OdinInspector.Editor.ITemporaryContext" /> have <see cref="M:Sirenix.OdinInspector.Editor.ITemporaryContext.Reset" /> called.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TDrawer">The type of the drawer.</typeparam>
            <param name="key">The key of the context value to get.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetTemporary``1(System.Type,System.String)">
            <summary>
            <para>Gets a temporary context value local to a drawer type for a given key, and creates a new instance of <see cref="!:T" /> as a default value if the context doesn't already exist.</para>
            <para>Temporary context values are reset at the start of every GUI frame; arrays are set to default values, collections are cleared, and context types that implement <see cref="T:Sirenix.OdinInspector.Editor.ITemporaryContext" /> have <see cref="M:Sirenix.OdinInspector.Editor.ITemporaryContext.Reset" /> called.</para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="drawerType">The type of the drawer.</param>
            <param name="key">The key of the context value to get.</param>
            <returns>
            The found context.
            </returns>
            <exception cref="T:System.ArgumentNullException">drawerInstance is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.ResetTemporaryContexts">
            <summary>
            Resets all temporary contexts for the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.SwapContext(Sirenix.OdinInspector.Editor.PropertyContextContainer)">
            <summary>
            Swaps context values with a given <see cref="T:Sirenix.OdinInspector.Editor.PropertyContextContainer"/>.
            </summary>
            <param name="otherContext">The context to swap with.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetPersistent``1(Sirenix.OdinInspector.Editor.OdinDrawer,System.String,``0)">
            <summary>
            Gets a <see cref="T:Sirenix.OdinInspector.Editor.GlobalPersistentContext`1"/> object and creates a <see cref="T:Sirenix.OdinInspector.Editor.LocalPersistentContext`1"/> object for it.
            </summary>
            <typeparam name="TValue">The type of the value of the context.</typeparam>
            <param name="drawer">The instance of the drawer.</param>
            <param name="key">The key for the context.</param>
            <param name="defaultValue">The default value for the context.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyContextContainer.GetPersistent``1(Sirenix.OdinInspector.Editor.OdinDrawer,System.String,Sirenix.OdinInspector.Editor.LocalPersistentContext{``0}@)">
            <summary>
            Gets a <see cref="T:Sirenix.OdinInspector.Editor.GlobalPersistentContext`1"/> object and creates a <see cref="T:Sirenix.OdinInspector.Editor.LocalPersistentContext`1"/> object for it.
            Returns <c>true</c> when the <see cref="T:Sirenix.OdinInspector.Editor.GlobalPersistentContext`1"/> is first created. Otherwise <c>false</c>.
            </summary>
            <typeparam name="TValue">The type of the value of the context.</typeparam>
            <param name="drawer">The instance of the drawer.</param>
            <param name="key">The key for the context.</param>
            <param name="context">The <see cref="T:Sirenix.OdinInspector.Editor.LocalPersistentContext`1"/> object.</param>
            <returns>Returns <c>true</c> when the <see cref="T:Sirenix.OdinInspector.Editor.GlobalPersistentContext`1"/> is first created. Otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.TemporaryPropertyContext`1">
            <summary>
            <para>A temporary contextual value attached to an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>, mapped to a key, contained in a <see cref="T:Sirenix.OdinInspector.Editor.PropertyContextContainer"/>.</para>
            <para>The value of a <see cref="T:Sirenix.OdinInspector.Editor.TemporaryPropertyContext`1"/> will be reset at the start of each GUI frame.</para>
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.Editor.PropertyContextContainer"/>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.TemporaryPropertyContext`1.Value">
            <summary>
            The contained value.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.TemporaryPropertyContext`1.op_Explicit(Sirenix.OdinInspector.Editor.TemporaryPropertyContext{`0})~`0">
            <summary>
            Performs an explicit conversion from <see cref="T:Sirenix.OdinInspector.Editor.TemporaryPropertyContext`1"/> to <see cref="!:T"/>.
            </summary>
            <param name="context">The configuration.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.TemporaryPropertyContext`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance, of the format "<see cref="T:Sirenix.OdinInspector.Editor.TemporaryPropertyContext`1"/>: Value.ToString()".
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.TemporaryPropertyContext`1.Reset">
            <summary>
            Resets the value of the context.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IDefinesGenericMenuItems">
            <summary>
            An <see cref="T:Sirenix.OdinInspector.Editor.OdinDrawer"/> can implement this interface to indicate that it defines right-click context menu items for properties that it draws.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IDefinesGenericMenuItems.PopulateGenericMenu(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEditor.GenericMenu)">
            <summary>
            Method that is invoked when a user has right-clicked a property, and the context menu is being built. The method is invoked in order of drawer priority.
            </summary>
            <param name="property">The property that has been right-clicked on.</param>
            <param name="genericMenu">The generic menu instance that is being built. Add items to this.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.AliasGetterSetter`4">
            <summary>
            A polymorphic alias for getting and setting the values of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo`2" />.
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TPropertyOwner">The type of the property owner.</typeparam>
            <typeparam name="TPropertyValue">The type of the property value.</typeparam>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.AliasGetterSetter`4.#ctor(Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo{`2,`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.AliasGetterSetter`4"/> class.
            </summary>
            <param name="info">The information.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.AliasGetterSetter`4.GetValue(System.Object)">
            <summary>
            Gets the value from a given weakly typed owner.
            </summary>
            <param name="owner">The weakly typed owner.</param>
            <returns>The found value.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.AliasGetterSetter`4.GetValue(`0@)">
            <summary>
            Gets the value from a given owner.
            </summary>
            <param name="owner">The owner.</param>
            <returns>The found value.</returns>
            <exception cref="T:System.ArgumentNullException">owner is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.AliasGetterSetter`4.SetValue(System.Object,System.Object)">
            <summary>
            Sets the weakly typed value on a given weakly typed owner.
            </summary>
            <param name="owner">The owner.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.AliasGetterSetter`4.SetValue(`0@,`1)">
            <summary>
            Sets the value on a given owner.
            </summary>
            <param name="owner">The owner.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.InspectorMethodPropertyInfo`1">
            <summary>
            Contains meta-data information about a method-backed property in the inspector.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorMethodPropertyInfo`1.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.InspectorMethodPropertyInfo`1"/> class.
            </summary>
            <param name="methodInfo">The method to represent.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorMethodPropertyInfo`1.GetValue(System.Object)">
            <summary>
            Gets the value of this property from the given owner. This method will throw an exception.
            </summary>
            <param name="owner">The owner.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Cannot get the value of a property of type PropertyType.Method.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorMethodPropertyInfo`1.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this property on the given owner. This method will throw an exception.
            </summary>
            <param name="owner">The owner.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">Cannot set the value of a property of type PropertyType.Method.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorMethodPropertyInfo`1.TryConvertToGetterSetter``2(Sirenix.OdinInspector.Editor.IValueGetterSetter{``0,``1}@)">
            <summary>
            Returns false and a null getter setter.
            </summary>
            <typeparam name="TOwner2">The type of the owner2.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="getterSetter">The getter setter.</param>
            <returns></returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.InspectorPropertyGroupInfo">
            <summary>
            Contains meta-data information about a group property in the inspector.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyGroupInfo.GroupInfos">
            <summary>
            The <see cref="T:Sirenix.OdinInspector.Editor.InspectorPropertyInfo"/>s of all the individual members in this group.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyGroupInfo.#ctor(System.String,System.Int32,System.Collections.Generic.IList{Sirenix.OdinInspector.Editor.InspectorPropertyInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.InspectorPropertyGroupInfo"/> class.
            </summary>
            <param name="groupName">The group name.</param>
            <param name="order">The group order.</param>
            <param name="infos">The member infos.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyGroupInfo.GetValue(System.Object)">
            <summary>
            Gets the value of this property from the given owner. This method will throw an exception.
            </summary>
            <param name="owner">The owner.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Cannot get the value of a property of type PropertyType.Group.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyGroupInfo.SetValue(System.Object,System.Object)">
            <summary>
            Gets the value of this property from the given owner. This method will throw an exception.
            </summary>
            <param name="owner">The owner.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">Cannot set the value of a property of type PropertyType.Group.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyGroupInfo.TryConvertToGetterSetter``2(Sirenix.OdinInspector.Editor.IValueGetterSetter{``0,``1}@)">
            <summary>
            Returns false and a null getter setter.
            </summary>
            <typeparam name="TOwner2">The type of the owner2.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="getterSetter">The getter setter.</param>
            <returns></returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.InspectorPropertyInfo">
            <summary>
            Contains meta-data information about a property in the inspector.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.PropertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.MemberInfo">
            <summary>
            The member info of the property. If the property has many member infos, such as if it is a group property, the first member info of <see cref="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.MemberInfos"/> is returned.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.PropertyType">
            <summary>
            Indicates which type of property it is.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.SerializationBackend">
            <summary>
            The serialization backend for this property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.TypeOfOwner">
            <summary>
            The type on which this property is declared.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.TypeOfValue">
            <summary>
            The base type of the value which this property represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.IsEditable">
            <summary>
            Whether this property is editable or not.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.MemberInfos">
            <summary>
            All member infos of the property. There will only be more than one member if it is an <see cref="T:Sirenix.OdinInspector.Editor.InspectorPropertyGroupInfo"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.Order">
            <summary>
            The order value of this property. Properties are ordered by ascending order, IE, lower order values are shown first in the inspector.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.Attributes">
            <summary>
            The attributes associated with this property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.IsUnityPropertyOnly">
            <summary>
            Whether this property only exists as a Unity <see cref="T:UnityEditor.SerializedProperty"/>, and has no associated managed member to represent it.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.#ctor(System.Reflection.MemberInfo,Sirenix.OdinInspector.Editor.PropertyType,Sirenix.OdinInspector.Editor.SerializationBackend,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.InspectorPropertyInfo"/> class.
            </summary>
            <param name="memberInfo">The member to represent.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="serializationBackend">The serialization backend.</param>
            <param name="allowEditable">Whether the property is editable.</param>
            <exception cref="T:System.ArgumentNullException">memberInfo is null</exception>
            <exception cref="T:System.ArgumentException">Cannot greate a property group for only one member.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.#ctor(System.String,System.Int32,System.Collections.Generic.IList{Sirenix.OdinInspector.Editor.InspectorPropertyInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.InspectorPropertyInfo"/> class.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="order">The group order.</param>
            <param name="infos">The member infos.</param>
            <exception cref="T:System.ArgumentNullException">
            groupId is null
            or
            infos is null
            </exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.#ctor(System.String,System.Type,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.InspectorPropertyInfo"/> class.
            </summary>
            <param name="unityPropertyName">Name of the unity property.</param>
            <param name="typeOfOwner">The type of owner.</param>
            <param name="typeOfValue">The type of value.</param>
            <param name="isEditable">Whether the property is editable.</param>
            <exception cref="T:System.ArgumentNullException">
            unityPropertyName is null
            or
            ownerType is null
            or
            valueType is null
            </exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this property on the given owner.
            </summary>
            <param name="owner">The owner.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.GetValue(System.Object)">
            <summary>
            Gets the value of this property from the given owner.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.TryConvertToGetterSetter``2(Sirenix.OdinInspector.Editor.IValueGetterSetter{``0,``1}@)">
            <summary>
            <para>Tries to convert this property to a strongly typed <see cref="T:Sirenix.OdinInspector.Editor.IValueGetterSetter`2" />.</para>
            <para>A polymorphic alias <see cref="T:Sirenix.OdinInspector.Editor.AliasGetterSetter`4" /> will be created if necessary.</para>
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="getterSetter">The converted getter setter.</param>
            <returns>True if the conversion succeeded, otherwise false.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.GetAttribute``1">
            <summary>
            Gets the first attribute of a given type on this property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.GetAttribute``1(System.Collections.Generic.HashSet{System.Attribute})">
            <summary>
            Gets the first attribute of a given type on this property, which is not contained in a given hashset.
            </summary>
            <param name="exclude">The attributes to exclude.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.GetAttributes``1">
            <summary>
            Gets all attributes of a given type on the property.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.Get(System.Type,System.Boolean)">
            <summary>
            Gets all <see cref="T:Sirenix.OdinInspector.Editor.InspectorPropertyInfo" />s for a given type.
            </summary>
            <param name="type">The type to get infos for.</param>
            <param name="includeSpeciallySerializedMembers">if set to <c>true</c> members that are serialized by Odin will be included.</param>
            <exception cref="T:System.ArgumentNullException">type is null</exception>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo`2">
            <summary>
            Contains meta-data information about a field or property-backed property in the inspector.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo`2.#ctor(System.Reflection.FieldInfo,Sirenix.OdinInspector.Editor.SerializationBackend,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo`2"/> class.
            </summary>
            <param name="fieldInfo">The field to represent.</param>
            <param name="serializationBackend">The serialization backend.</param>
            <param name="allowEditable">Whether the property can be editable.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo`2.#ctor(System.Reflection.PropertyInfo,Sirenix.OdinInspector.Editor.SerializationBackend,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo`2"/> class.
            </summary>
            <param name="propertyInfo">The property to represent.</param>
            <param name="serializationBackend">The serialization backend.</param>
            <param name="allowEditable">Whether the property can be editable.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo`2.GetValue(System.Object)">
            <summary>
            Gets the value of this property from the given owner.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo`2.GetValue(`0@)">
            <summary>
            Gets the value of this property from the given owner.
            </summary>
            <param name="owner">The owner.</param>
            <exception cref="T:System.ArgumentNullException">owner is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo`2.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this property on the given owner.
            </summary>
            <param name="owner">The owner.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo`2.SetValue(`0@,`1)">
            <summary>
            Sets the value of this property on the given owner.
            </summary>
            <param name="owner">The owner.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">owner is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorValuePropertyInfo`2.TryConvertToGetterSetter``2(Sirenix.OdinInspector.Editor.IValueGetterSetter{``0,``1}@)">
            <summary>
            <para>Tries to convert this property to a strongly typed <see cref="T:Sirenix.OdinInspector.Editor.IValueGetterSetter`2" />.</para>
            <para>A polymorphic alias <see cref="T:Sirenix.OdinInspector.Editor.AliasGetterSetter`4" /> will be created if necessary.</para>
            </summary>
            <typeparam name="TOwner2">The type of the owner.</typeparam>
            <typeparam name="TValue2">The type of the value.</typeparam>
            <param name="getterSetter">The converted getter setter.</param>
            <returns>True if the conversion succeeded, otherwise false.</returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.InspectorProperty">
            <summary>
            Represents a property in the inspector, and provides the hub for all functionality related to that property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.NiceName">
            <summary>
            The nice name of the property, usually as converted by <see cref="M:UnityEditor.ObjectNames.NicifyVariableName(System.String)"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.Label">
            <summary>
            The cached label of the property, usually containing <see cref="P:Sirenix.OdinInspector.Editor.InspectorProperty.NiceName"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.Path">
            <summary>
            The full Odin path of the property. To get the Unity property path, see <see cref="P:Sirenix.OdinInspector.Editor.InspectorProperty.UnityPropertyPath"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.Index">
            <summary>
            The child index of this property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.RecursiveDrawDepth">
            <summary>
            <para>The current recursive draw depth, incremented for each time that the property has caused itself to be drawn recursively.</para>
            <para>Note that this is the <i>current</i> recursion level, not the total amount of recursions so far this frame.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.DrawCount">
            <summary>
            The amount of times that the property has been drawn so far this frame.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.DrawerChainIndex">
            <summary>
            How deep in the drawer chain the property currently is, in the current drawing session as determined by <see cref="P:Sirenix.OdinInspector.Editor.InspectorProperty.DrawCount"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.SupportsPrefabModifications">
            <summary>
            Whether this property supports having prefab modifications applied or not.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.BaseValueEntry">
            <summary>
            The value entry that represents the base value of this property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.ValueEntry">
            <summary>
            The value entry that represents the strongly typed value of the property; this is possibly an alias entry in case of polymorphism.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.Parent">
            <summary>
            The parent of the property. If null, this property is a root-level property in the <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.Info">
            <summary>
            The <see cref="T:Sirenix.OdinInspector.Editor.InspectorPropertyInfo"/> of this property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.Tree">
            <summary>
            The <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree"/> that this property exists in.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.Children">
            <summary>
            The children of this property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.Context">
            <summary>
            The context container of this property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.LastDrawnValueRect">
            <summary>
            The last rect that this property was drawn within.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.ParentType">
            <summary>
            The type on which this property is declared. This is the same as <see cref="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.TypeOfOwner"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.ParentValues">
            <summary>
            The parent values of this property, by selection index; this represents the values that 'own' this property, on which it is declared.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.UnityPropertyPath">
            <summary>
            <para>The full Unity property path of this property; note that this is merely a converted version of <see cref="P:Sirenix.OdinInspector.Editor.InspectorProperty.Path"/>, and not necessarily a path to an actual Unity property.</para>
            <para>In the case of Odin-serialized data, for example, no Unity properties will exist at this path.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.InspectorProperty.DeepReflectionPath">
            <summary>
            <para>The full path of this property as used by deep reflection, containing all the necessary information to find this property through reflection only. This is used as the path for prefab modifications.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.Draw">
            <summary>
            Draws this property in the inspector. This is a shorthand for <see cref="M:Sirenix.OdinInspector.Editor.InspectorUtilities.DrawProperty(Sirenix.OdinInspector.Editor.InspectorProperty)"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.Draw(UnityEngine.GUIContent)">
            <summary>
            Draws this property in the inspector with a given label. This is a shorthand for <see cref="M:Sirenix.OdinInspector.Editor.InspectorUtilities.DrawProperty(Sirenix.OdinInspector.Editor.InspectorProperty,UnityEngine.GUIContent)"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.PushDraw">
            <summary>
            Push a draw session. This is used by <see cref="P:Sirenix.OdinInspector.Editor.InspectorProperty.DrawCount"/> and <see cref="P:Sirenix.OdinInspector.Editor.InspectorProperty.RecursiveDrawDepth"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.IncrementDrawerChainIndex">
            <summary>
            Increments the current drawer chain index. This is used by <see cref="P:Sirenix.OdinInspector.Editor.InspectorProperty.DrawerChainIndex"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.PopDraw">
            <summary>
            Pop a draw session. This is used by <see cref="P:Sirenix.OdinInspector.Editor.InspectorProperty.DrawCount"/> and <see cref="P:Sirenix.OdinInspector.Editor.InspectorProperty.RecursiveDrawDepth"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.NextProperty(System.Boolean)">
            <summary>
            Gets the next property in the <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree"/>, or null if none is found.
            </summary>
            <param name="includeChildren">Whether to include children or not.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.FindParent(Sirenix.OdinInspector.Editor.PropertyValueCategory,System.Boolean)">
            <summary>
            Finds the first parent property with the specified value category.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.Update(System.Boolean)">
            <summary>
            Updates the property. This method resets the temporary context, and updates the value entry and the property children.
            </summary>
            <param name="forceUpdate">If true, the property will update regardless of whether it has already updated for the current <see cref="P:Sirenix.OdinInspector.Editor.PropertyTree.UpdateID"/>.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.PopulateGenericMenu(UnityEditor.GenericMenu)">
            <summary>
            Populates a generic menu with items from all drawers for this property that implement <see cref="T:Sirenix.OdinInspector.Editor.IDefinesGenericMenuItems"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.IsChildOf(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Determines whether this property is the child of another property in the hierarchy.
            </summary>
            <param name="other">The property to check whether this property is the child of.</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.IsParentOf(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Determines whether this property is a parent of another property in the hierarchy.
            </summary>
            <param name="other">The property to check whether this property is the parent of.</param>
            <exception cref="T:System.ArgumentNullException">other is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.InspectorProperty.GetBaseContainedValueType(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Gets the base contained value type of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>, IE, the type that this property is absent polymorphism.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyTree">
            <summary>
            <para>Represents a set of values of the same type as a tree of properties that can be drawn in the inspector, and provides an array of utilities for querying the tree of properties.</para>
            <para>This class also handles management of prefab modifications.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree.UnitySerializedObject">
            <summary>
            The <see cref="T:UnityEditor.SerializedObject"/> that this tree represents, if the tree was created for a <see cref="T:UnityEditor.SerializedObject"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree.UpdateID">
            <summary>
            The current update ID of the tree. This is incremented once, each update, and is used by <see cref="M:Sirenix.OdinInspector.Editor.InspectorProperty.Update(System.Boolean)"/> to avoid updating multiple times in the same update round.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree.TargetType">
            <summary>
            The type of the values that the property tree represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree.WeakTargets">
            <summary>
            The actual values that the property tree represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree.HasPrefabs">
            <summary>
            Whether any of the values the property tree represents are prefab instances.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree.TargetPrefabs">
            <summary>
            The prefabs for each prefab instance represented by the property tree, if any.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree.RootPropertyCount">
            <summary>
            The number of root properties in the tree.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree.PrefabPropertyTree">
            <summary>
            A prefab tree for the prefabs of this property tree's prefab instances, if any exist.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree.IncludesSpeciallySerializedMembers">
            <summary>
            Whether this property tree also represents members that are specially serialized by Odin.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree.DrawMonoScriptObjectField">
            <summary>
            Gets a value indicating whether or not to draw the mono script object field at the top of the property tree.
            </summary>
        </member>
        <member name="E:Sirenix.OdinInspector.Editor.PropertyTree.OnUndoRedoPerformed">
            <summary>
            An event that is invoked whenever an undo or a redo is performed in the inspector.
            The advantage of using this event on a property tree instance instead of
            <see cref="F:UnityEditor.Undo.undoRedoPerformed"/> is that this event will be desubscribed from
            <see cref="F:UnityEditor.Undo.undoRedoPerformed"/> when the selection changes and the property
            tree is no longer being used, allowing the GC to collect the property tree.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.#ctor">
            <summary>
            Creates a new <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree" /> for all target values of a <see cref="T:UnityEditor.SerializedObject" />.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.DelayAction(System.Action)">
            <summary>
            Schedules a delegate to be invoked at the end of the current GUI frame.
            </summary>
            <param name="action">The action delegate to be delayed.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.DelayActionUntilRepaint(System.Action)">
            <summary>
            Schedules a delegate to be invoked at the end of the next Repaint GUI frame.
            </summary>
            <param name="action">The action to be delayed.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.EnumerateTree(System.Boolean)">
            <summary>
            Enumerates over the properties of the tree.
            </summary>
            <param name="includeChildren">Whether to include children of the root properties or not. If set to true, every property in the entire tree will be enumerated.</param>
            <returns></returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.GetPropertyAtPath(System.String)">
            <summary>
            Gets the property at the given path. Note that this is the path found in <see cref="P:Sirenix.OdinInspector.Editor.InspectorProperty.Path" />, not the Unity path. This is a dictionary look-up.
            </summary>
            <param name="path">The path of the property to get.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.GetPropertyAtUnityPath(System.String)">
            <summary>
            Gets the property at the given Unity path. This is a dictionary look-up.
            </summary>
            <param name="path">The Unity path of the property to get.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.GetPropertyAtDeepReflectionPath(System.String)">
            <summary>
            Gets the property at the given deep reflection path. This is a dictionary look-up.
            </summary>
            <param name="path">The deep reflection path of the property to get.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.Draw(System.Boolean)">
            <summary>
            <para>Draw the property tree, and handles management of undo, as well as marking scenes and drawn assets dirty.</para>
            <para>
            This is a shorthand for calling
            <see cref="M:Sirenix.OdinInspector.Editor.InspectorUtilities.BeginDrawPropertyTree(Sirenix.OdinInspector.Editor.PropertyTree,System.Boolean)"/>,
            <see cref="M:Sirenix.OdinInspector.Editor.InspectorUtilities.DrawPropertiesInTree(Sirenix.OdinInspector.Editor.PropertyTree)"/> and .
            <see cref="M:Sirenix.OdinInspector.Editor.InspectorUtilities.EndDrawPropertyTree(Sirenix.OdinInspector.Editor.PropertyTree)"/>.
            </para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.GetUnityPropertyForPath(System.String)">
            <summary>
            Gets a Unity property for the given Odin or Unity path. If there is no <see cref="T:UnityEditor.SerializedObject" /> for this property tree, or no such property is found in the <see cref="T:UnityEditor.SerializedObject" />, a property will be emitted using <see cref="T:Sirenix.OdinInspector.Editor.UnityPropertyEmitter" />.
            </summary>
            <param name="path">The Odin or Unity path to the property to get.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.GetUnityPropertyForPath(System.String,System.Reflection.FieldInfo@)">
            <summary>
            Gets a Unity property for the given Odin or Unity path. If there is no <see cref="T:UnityEditor.SerializedObject" /> for this property tree, or no such property is found in the <see cref="T:UnityEditor.SerializedObject" />, a property will be emitted using <see cref="T:Sirenix.OdinInspector.Editor.UnityPropertyEmitter" />.
            </summary>
            <param name="path">The Odin or Unity path to the property to get.</param>
            <param name="backingField">The backing field of the Unity property.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.ObjectIsReferenced(System.Object,System.String@)">
            <summary>
            Checks whether a given object instance is referenced anywhere in the tree, and if it is, gives the path of the first time the object reference was encountered as an out parameter.
            </summary>
            <param name="value">The reference value to check.</param>
            <param name="referencePath">The first found path of the object.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.GetReferenceCount(System.Object)">
            <summary>
            Gets the number of references to a given object instance in this tree.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.UpdateTree">
            <summary>
            Updates all properties in the entire tree, and validates the prefab state of the tree, if applicable.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.ReplaceAllReferences(System.Object,System.Object)">
            <summary>
            Replaces all occurrences of a value with another value, in the entire tree.
            </summary>
            <param name="from">The value to find all instances of.</param>
            <param name="to">The value to replace the found values with.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.GetRootProperty(System.Int32)">
            <summary>
            Gets the root tree property at a given index.
            </summary>
            <param name="index">The index of the property to get.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.InvokeDelayedActions">
            <summary>
            Invokes the actions that have been delayed using <see cref="M:Sirenix.OdinInspector.Editor.PropertyTree.DelayAction(System.Action)"/> and <see cref="M:Sirenix.OdinInspector.Editor.PropertyTree.DelayActionUntilRepaint(System.Action)"/>.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.GetPrefabModificationType(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Gets the prefab modification type of a given property, if any.
            </summary>
            <param name="property">The property to check.</param>
            <returns>The prefab modification type of the property if it has one, otherwise null.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.RegisterPrefabListLengthModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,System.Int32)">
            <summary>
            Registers a modification of type <see cref="F:Sirenix.Serialization.PrefabModificationType.ListLength"/> for a given property.
            </summary>
            <param name="property">The property to register a modification for.</param>
            <param name="targetIndex">Selection index of the target to register a modification for.</param>
            <param name="newLength">The modified list length.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.RegisterPrefabValueModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,System.Boolean)">
            <summary>
            Registers a modification of type <see cref="F:Sirenix.Serialization.PrefabModificationType.Value"/> for a given property.
            </summary>
            <param name="property">The property to register a modification for.</param>
            <param name="targetIndex">Selection index of the target to register a modification for.</param>
            <param name="forceImmediate">Whether to force the change to be registered immediately, rather than at the end of frame.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.RegisterPrefabDictionaryDeltaModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32)">
            <summary>
            Calculates a delta between the current dictionary property and its prefab counterpart, and registers that delta as a <see cref="F:Sirenix.Serialization.PrefabModificationType.Dictionary"/> modification.
            </summary>
            <param name="property">The property to register a modification for.</param>
            <param name="targetIndex">Selection index of the target.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.RegisterPrefabDictionaryRemoveKeyModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,System.Object)">
            <summary>
            Adds a remove key modification to the dictionary modifications of a given property.
            </summary>
            <param name="property">The property to register a modification for.</param>
            <param name="targetIndex">Selection index of the target.</param>
            <param name="key">The key to be removed.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.RegisterPrefabDictionaryAddKeyModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,System.Object)">
            <summary>
            Adds an add key modification to the dictionary modifications of a given property.
            </summary>
            <param name="property">The property to register a modification for.</param>
            <param name="targetIndex">Selection index of the target.</param>
            <param name="key">The key to be added.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.RemovePrefabDictionaryModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,System.Object)">
            <summary>
            Removes all dictionary modifications on a property for a given dictionary key value.
            </summary>
            <param name="property">The property to remove a key modification for.</param>
            <param name="targetIndex">Selection index of the target.</param>
            <param name="key">The key to remove modifications for.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.RemovePrefabModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,Sirenix.Serialization.PrefabModificationType)">
            <summary>
            Removes all prefab modifications of a given type on a given property.
            </summary>
            <param name="property">The property to remove modifications for.</param>
            <param name="targetIndex">Selection index of the target.</param>
            <param name="modificationType">Type of the modification to remove.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.GetPrefabModifications(System.Int32)">
            <summary>
            Gets all prefab modifications in this property tree for a given selection index.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.ApplyChanges">
            <summary>
            Applies all changes made with properties to the inspected target tree values.
            </summary>
            <returns>true if any values were changed, otherwise false</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.InvokeOnValidate">
            <summary>
            Invokes the OnValidate method on the property tree's targets if they are derived from <see cref="T:UnityEngine.Object"/> and have the method defined.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.ForceRegisterObjectReference(System.Object,Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Registers an object reference to a given path; this is used to ensure that objects are always registered after having been encountered once.
            </summary>
            <param name="reference">The referenced object.</param>
            <param name="property">The property that contains the reference.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.Create(System.Object)">
            <summary>
            Creates a new <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree" /> for a given target value.
            </summary>
            <param name="target">The target to create a tree for.</param>
            <exception cref="T:System.ArgumentNullException">target is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.Create(System.Object[])">
            <summary>
            <para>Creates a new <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree" /> for a set of given target values.</para>
            <para>Note that the targets all need to be of the same type.</para>
            </summary>
            <param name="targets">The targets to create a tree for.</param>
            <exception cref="T:System.ArgumentNullException">targets is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.Create(UnityEditor.SerializedObject)">
            <summary>
            Creates a new <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree" /> for all target values of a <see cref="T:UnityEditor.SerializedObject" />.
            </summary>
            <param name="serializedObject">The serialized object to create a tree for.</param>
            <exception cref="T:System.ArgumentNullException">serializedObject is null</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.Create(System.Collections.IList)">
            <summary>
            <para>Creates a new <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree"/> for a set of given target values.</para>
            <para>Note that the targets all need to be of the same type.</para>
            </summary>
            <param name="targets">The targets to create a tree for.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree.Create(System.Collections.IList,UnityEditor.SerializedObject)">
            <summary>
            <para>Creates a new <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree"/> for a set of given target values, represented by a given <see cref="T:UnityEditor.SerializedObject"/>.</para>
            <para>Note that the targets all need to be of the same type.</para>
            </summary>
            <param name="targets">The targets to create a tree for.</param>
            <param name="serializedObject">The serialized object to create a tree for. Note that the target values of the given <see cref="T:UnityEditor.SerializedObject"/> must be the same values given in the targets parameter.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyTree`1">
            <summary>
            <para>Represents a set of strongly typed values as a tree of properties that can be drawn in the inspector, and provides an array of utilities for querying the tree of properties.</para>
            <para>This class also handles management of prefab modifications.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree`1.UpdateID">
            <summary>
            The current update ID of the tree. This is incremented once, each update, and is used by <see cref="M:Sirenix.OdinInspector.Editor.InspectorProperty.Update(System.Boolean)" /> to avoid updating multiple times in the same update round.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree`1.UnitySerializedObject">
            <summary>
            The <see cref="T:UnityEditor.SerializedObject" /> that this tree represents, if the tree was created for a <see cref="T:UnityEditor.SerializedObject" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree`1.TargetType">
            <summary>
            The type of the values that the property tree represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree`1.TargetPrefabs">
            <summary>
            The prefabs for each prefab instance represented by the property tree, if any.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree`1.HasPrefabs">
            <summary>
            Whether any of the values the property tree represents are prefab instances.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree`1.Targets">
            <summary>
            The strongly types actual values that the property tree represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree`1.WeakTargets">
            <summary>
            The weakly types actual values that the property tree represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree`1.RootPropertyCount">
            <summary>
            The number of root properties in the tree.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree`1.PrefabPropertyTree">
            <summary>
            A prefab tree for the prefabs of this property tree's prefab instances, if any exist.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyTree`1.IncludesSpeciallySerializedMembers">
            <summary>
            Whether this property tree also represents members that are specially serialized by Odin.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.#ctor(UnityEditor.SerializedObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree`1"/> class.
            </summary>
            <param name="serializedObject">The serialized object to represent.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree`1"/> class.
            </summary>
            <param name="targets">The targets to represent.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.#ctor(`0[],UnityEditor.SerializedObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyTree`1"/> class.
            </summary>
            <param name="targets">The targets to represent.</param>
            <param name="serializedObject">The serialized object to represent. Note that the target values of the given <see cref="T:UnityEditor.SerializedObject"/> must be the same values given in the targets parameter.</param>
            <exception cref="T:System.ArgumentNullException">targets is null</exception>
            <exception cref="T:System.ArgumentException">
            There must be at least one target.
            or
            A given target is a null value.
            </exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.GetPrefabModificationType(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Gets the prefab modification type of a given property, if any.
            </summary>
            <param name="property">The property to check.</param>
            <returns>
            The prefab modification type of the property if it has one, otherwise null.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.RegisterPrefabListLengthModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,System.Int32)">
            <summary>
            Registers a modification of type <see cref="F:Sirenix.Serialization.PrefabModificationType.ListLength" /> for a given property.
            </summary>
            <param name="property">The property to register a modification for.</param>
            <param name="targetIndex">Selection index of the target to register a modification for.</param>
            <param name="newLength">The modified list length.</param>
            <exception cref="T:System.ArgumentException">
            Property " + property.Path + " does not have a value entry; cannot register prefab modification to this property.
            or
            newLength cannot be negative!
            </exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.RegisterPrefabValueModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,System.Boolean)">
            <summary>
            Registers a modification of type <see cref="F:Sirenix.Serialization.PrefabModificationType.Value" /> for a given property.
            </summary>
            <param name="property">The property to register a modification for.</param>
            <param name="targetIndex">Selection index of the target to register a modification for.</param>
            <param name="forceImmediate">Whether to force the change to be registered immediately, rather than at the end of frame.</param>
            <exception cref="T:System.ArgumentException">Property " + property.Path + " does not have a value entry; cannot register prefab modification to this property.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.RegisterPrefabDictionaryDeltaModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32)">
            <summary>
            Calculates a delta between the current dictionary property and its prefab counterpart, and registers that delta as a <see cref="F:Sirenix.Serialization.PrefabModificationType.Dictionary" /> modification.
            </summary>
            <param name="property">The property to register a modification for.</param>
            <param name="targetIndex">Selection index of the target.</param>
            <exception cref="T:System.ArgumentException">Property " + property.Path + " does not have a value entry; cannot register prefab modification to this property.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.RegisterPrefabDictionaryRemoveKeyModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,System.Object)">
            <summary>
            Adds a remove key modification to the dictionary modifications of a given property.
            </summary>
            <param name="property">The property to register a modification for.</param>
            <param name="targetIndex">Selection index of the target.</param>
            <param name="key">The key to be removed.</param>
            <exception cref="T:System.ArgumentException">Property " + property.Path + " does not have a value entry; cannot register prefab modification to this property.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.RegisterPrefabDictionaryAddKeyModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,System.Object)">
            <summary>
            Adds an add key modification to the dictionary modifications of a given property.
            </summary>
            <param name="property">The property to register a modification for.</param>
            <param name="targetIndex">Selection index of the target.</param>
            <param name="key">The key to be added.</param>
            <exception cref="T:System.ArgumentException">Property " + property.Path + " does not have a value entry; cannot register prefab modification to this property.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.RemovePrefabDictionaryModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,System.Object)">
            <summary>
            Removes all dictionary modifications on a property for a given dictionary key value.
            </summary>
            <param name="property">The property to remove a key modification for.</param>
            <param name="targetIndex">Selection index of the target.</param>
            <param name="key">The key to remove modifications for.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.RemovePrefabModification(Sirenix.OdinInspector.Editor.InspectorProperty,System.Int32,Sirenix.Serialization.PrefabModificationType)">
            <summary>
            Removes all prefab modifications of a given type on a given property.
            </summary>
            <param name="property">The property to remove modifications for.</param>
            <param name="targetIndex">Selection index of the target.</param>
            <param name="modificationType">Type of the modification to remove.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.GetPrefabModifications(System.Int32)">
            <summary>
            Gets all prefab modifications in this property tree for a given selection index.
            </summary>
            <param name="targetIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.UpdateTree">
            <summary>
            Updates all properties in the entire tree, and validates the prefab state of the tree, if applicable.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.ObjectIsReferenced(System.Object,System.String@)">
            <summary>
            Checks whether a given object instance is referenced anywhere in the tree, and if it is, gives the path of the first time the object reference was encountered as an out parameter.
            </summary>
            <param name="value">The reference value to check.</param>
            <param name="referencePath">The first found path of the object.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.GetReferenceCount(System.Object)">
            <summary>
            Gets the number of references to a given object instance in this tree.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.GetPropertyAtPath(System.String)">
            <summary>
            Gets the property at the given path. Note that this is the path found in <see cref="P:Sirenix.OdinInspector.Editor.InspectorProperty.Path" />, not the Unity path. This is a dictionary look-up.
            </summary>
            <param name="path">The path of the property to get.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.GetPropertyAtUnityPath(System.String)">
            <summary>
            Gets the property at the given Unity path. This is a dictionary look-up.
            </summary>
            <param name="path">The Unity path of the property to get.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.GetPropertyAtDeepReflectionPath(System.String)">
            <summary>
            Gets the property at the given deep reflection path. This is a dictionary look-up.
            </summary>
            <param name="path">The deep reflection path of the property to get.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.GetUnityPropertyForPath(System.String,System.Reflection.FieldInfo@)">
            <summary>
            Gets a Unity property for the given Odin or Unity path. If there is no <see cref="T:UnityEditor.SerializedObject" /> for this property tree, or no such property is found in the <see cref="T:UnityEditor.SerializedObject" />, a property will be emitted using <see cref="T:Sirenix.OdinInspector.Editor.UnityPropertyEmitter" />.
            </summary>
            <param name="path">The Odin or Unity path to the property to get.</param>
            <param name="backingField">The backing field of the Unity property.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.EnumerateTree(System.Boolean)">
            <summary>
            Enumerates over the properties of the tree.
            </summary>
            <param name="includeChildren">Whether to include children of the root properties or not. If set to true, every property in the entire tree will be enumerated.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.ReplaceAllReferences(System.Object,System.Object)">
            <summary>
            Replaces all occurrences of a value with another value, in the entire tree.
            </summary>
            <param name="from">The value to find all instances of.</param>
            <param name="to">The value to replace the found values with.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">The value to replace with must either be null or be the same type as the value to replace (" + from.GetType().Name + ").</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.GetRootProperty(System.Int32)">
            <summary>
            Gets the root tree property at a given index.
            </summary>
            <param name="index">The index of the property to get.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.DelayAction(System.Action)">
            <summary>
            Schedules a delegate to be invoked at the end of the current GUI frame.
            </summary>
            <param name="action">The action delegate to be delayed.</param>
            <exception cref="T:System.ArgumentNullException">action</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.DelayActionUntilRepaint(System.Action)">
            <summary>
            Schedules a delegate to be invoked at the end of the next Repaint GUI frame.
            </summary>
            <param name="action">The action to be delayed.</param>
            <exception cref="T:System.ArgumentNullException">action</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyTree`1.InvokeDelayedActions">
            <summary>
            Invokes the actions that have been delayed using <see cref="M:Sirenix.OdinInspector.Editor.PropertyTree`1.DelayAction(System.Action)" /> and <see cref="M:Sirenix.OdinInspector.Editor.PropertyTree`1.DelayActionUntilRepaint(System.Action)" />.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyType">
            <summary>
            Enumeration describing the different types of properties that exist.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyType.ReferenceType">
            <summary>
            Property represents a reference type value.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyType.ValueType">
            <summary>
            Property represents a value type value.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyType.Method">
            <summary>
            Property represents a method.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyType.Group">
            <summary>
            Property represents a named group of properties.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyValueCategory">
            <summary>
            Enumeration describing the different kinds of value categories a property can be, IE, where does the property get its value from?
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueCategory.Member">
            <summary>
            Property represents a member.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueCategory.StrongListElement">
            <summary>
            Property represents an element in a strongly typed list (<see cref="T:System.Collections.Generic.IList`1"/>).
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueCategory.WeakListElement">
            <summary>
            Property represents an element in a weakly typed list (<see cref="T:System.Collections.IList"/>).
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueCategory.DictionaryElement">
            <summary>
            Property represents a key value pair in a dictionary (<see cref="T:System.Collections.Generic.IDictionary`2"/>).
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyValueState">
            <summary>
            Enumeration for designating whether a <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry"/> has a special state,.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueState.None">
            <summary>
            The value entry has no special state.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueState.Reference">
            <summary>
            The property is a reference to another property. Get the path of the referenced property from <see cref="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.TargetReferencePath"/>.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueState.NullReference">
            <summary>
            The value entry is a null value.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueState.PrimitiveValueConflict">
            <summary>
            <para>The value entry has a primitive value conflict across selected indices.</para>
            <para>A primitive value conflict is when primitive values, such a strings or floats, differ.</para>
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueState.ReferenceValueConflict">
            <summary>
            <para>The value entry has a reference value conflict across selected indices.</para>
            <para>A reference value conflict is when the types of reference type values differ, or when some values are null while others are not.</para>
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueState.ReferencePathConflict">
            <summary>
            <para>The value entry has a reference path conflict across selected indices.</para>
            <para>A reference path conflict is when the property consists of references to many conflicting paths. Use <see cref="M:Sirenix.OdinInspector.Editor.PropertyTree.ObjectIsReferenced(System.Object,System.String@)"/> to get paths to all referenced objects.</para>
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueState.CollectionLengthConflict">
            <summary>
            <para>The value entry has a collection length conflict across selected indices.</para>
            <para>A collection length conflict is when the property represents multiple parallel collections, and their lengths differ.</para>
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.SerializationBackend">
            <summary>
            Enumeration that describes the different possible serialization backends that a property can have.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.SerializationBackend.Unity">
            <summary>
            The property is serialized by Unity. Polymorphism, null values and types such as <see cref="T:System.Collections.Generic.Dictionary`2"/> are not supported.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.SerializationBackend.Odin">
            <summary>
            The property is serialized by Odin. Polymorphism, null values and types such as <see cref="T:System.Collections.Generic.Dictionary`2"/> are supported.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.SerializationBackend.None">
            <summary>
            <para>The property is not serialized by anything - possibly because it is a method, possibly because it is a field or property shown in the inspector without being serialized.</para>
            <para>In the case of fields or properties, polymorphism, null values and types such as <see cref="T:System.Collections.Generic.Dictionary`2"/> are supported, but will not be saved.</para>
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IValueEntryActualValueSetter">
            <summary>
            <para>An internally used interface that is used by value entries during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ApplyChanges"/>, that lets value entries force each other to set values directly to their target objects.</para>
            <para>This interface should not be used by people who do not know what they are doing.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IValueEntryActualValueSetter.SetActualValue(System.Int32,System.Object)">
            <summary>
            Sets the actual value of a value entry, for a given selection index.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.IValueEntryActualValueSetter`1">
            <summary>
            <para>An internally used interface that is used by value entries during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ApplyChanges"/>, that lets value entries force each other to set values directly to their target objects.</para>
            <para>This interface should not be used by people who do not know what they are doing.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.IValueEntryActualValueSetter`1.SetActualValue(System.Int32,`0)">
            <summary>
            Sets the actual value of a value entry, for a given selection index.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger">
            <summary>
            Provides functionality for applying list modifications to value entries representing lists.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.#ctor">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.ValueCount">
            <summary>
            The amount of list values that this changer represents. This is always equal to <see cref="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ValueCount"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.ElementType">
            <summary>
            The element type of the lists that this changer represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.Entry">
            <summary>
            The value entry that this changer is associated with.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.AddListElement(System.Object[],System.String)">
            <summary>
            Queue a change to add an element to all lists represented. Changes are applied in Repaint.
            </summary>
            <param name="values">The values to add.</param>
            <param name="changeId">The change identifier. This is used to group changes together when multiple changes are made from different sources.</param>
            <exception cref="T:System.ArgumentNullException">values is null</exception>
            <exception cref="T:System.ArgumentException">Wrong number of values given.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.InsertListElementAt(System.Int32,System.Object[],System.String)">
            <summary>
            Queue a change to insert an element into all lists represented. Changes are applied in Repaint.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="values">The values to add.</param>
            <param name="changeId">The change identifier. This is used to group changes together when multiple changes are made from different sources.</param>
            <exception cref="T:System.ArgumentNullException">values is null</exception>
            <exception cref="T:System.ArgumentException">Wrong number of values given.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.RemoveListElementAt(System.Int32,System.String)">
            <summary>
            Queue a change to remove an element from all lists represented. Changes are applied in Repaint.
            </summary>
            <param name="index">The index to remove at.</param>
            <param name="changeId">The change identifier. This is used to group changes together when multiple changes are made from different sources.</param>
            <exception cref="T:System.ArgumentNullException">values is null</exception>
            <exception cref="T:System.ArgumentException">Wrong number of values given.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.ClearList(System.String)">
            <summary>
            Queue a change to clear all lists represented. Changes are applied in Repaint.
            </summary>
            <param name="changeId">The change identifier. This is used to group changes together when multiple changes are made from different sources.</param>
            <exception cref="T:System.ArgumentNullException">values is null</exception>
            <exception cref="T:System.ArgumentException">Wrong number of values given.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.ApplyChanges">
            <summary>
            Applies all queued changes to the represented lists. This method only does something during Repaint.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.RemoveListElementAtImplementation(System.Int32)">
            <summary>
            Implementation of the remove list element change.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.InsertListElementAtImplementation(System.Int32,System.Object[])">
            <summary>
            Implementation of the insert list element change.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.AddListElementImplementation(System.Object[])">
            <summary>
            Implementation of the add list element change.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.ClearListImplementation">
            <summary>
            Implementation of the clear list change.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger.SetAllTreeActualValueReferences(System.Int32,System.Object,System.Object)">
            <summary>
            Sets all value references on a given selection index in the property tree to a given new value.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyMemberValueEntry`2">
            <summary>
            Represents the values of a member-backed <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>, and contains utilities for querying the values' type and getting and setting them.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyMemberValueEntry`2.ValueCategory">
            <summary>
            The value category of this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyMemberValueEntry`2.Initialize">
            <summary>
            Initializes this value entry.
            </summary>
            <exception cref="T:System.ArgumentException">On a value entry of type " + this.GetType().GetNiceName() + " on property " + this.Property.Name + " at path " + this.Property.Path + ", the given InspectorPropertyInfo of type " + this.Property.Info.GetType().GetNiceName() + " could not be converted into a reference of type " + typeof(IValueGetterSetter&lt;TParent, TValue&gt;).GetNiceName() + ".</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyMemberValueEntry`2.GetActualBoxedValue(`0)">
            <summary>
            Gets the actual boxed value of the tree target.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyMemberValueEntry`2.GetActualValue(`0)">
            <summary>
            Gets the actual value of the tree target.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyMemberValueEntry`2.SetActualBoxedValueImplementation(System.Int32,System.Object)">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyMemberValueEntry`2.SetActualValueImplementation(System.Int32,`1)">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyStrongListElementValueEntry`3">
            <summary>
            Represents the values of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/> for a strong list element, and contains utilities for querying the values' type and getting and setting them.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyStrongListElementValueEntry`3.ValueCategory">
            <summary>
            The value category of this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyStrongListElementValueEntry`3.GetActualBoxedValue(`0)">
            <summary>
            Gets the actual boxed value of the tree target.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyStrongListElementValueEntry`3.GetActualValue(`0)">
            <summary>
            Gets the actual value of the tree target.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyStrongListElementValueEntry`3.SetActualBoxedValueImplementation(System.Int32,System.Object)">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyStrongListElementValueEntry`3.SetActualValueImplementation(System.Int32,`2)">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyStrongListValueEntryChanger`2">
            <summary>
            Provides functionality for applying list modifications to value entries representing strong lists.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyStrongListValueEntryChanger`2.#ctor(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyStrongListValueEntryChanger`2"/> class.
            </summary>
            <param name="entry">The entry to represent.</param>
            <exception cref="T:System.ArgumentNullException">entry is null</exception>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyStrongListValueEntryChanger`2.ElementType">
            <summary>
            The element type of the lists that this changer represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyStrongListValueEntryChanger`2.Entry">
            <summary>
            The value entry that this changer is associated with.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyStrongListValueEntryChanger`2.AddListElementImplementation(System.Object[])">
            <summary>
            Implementation of the add list element change.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyStrongListValueEntryChanger`2.ClearListImplementation">
            <summary>
            Implementation of the clear list change.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyStrongListValueEntryChanger`2.InsertListElementAtImplementation(System.Int32,System.Object[])">
            <summary>
            Implementation of the insert list element change.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyStrongListValueEntryChanger`2.RemoveListElementAtImplementation(System.Int32)">
            <summary>
            Implementation of the remove list element change.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyValueEntry">
            <summary>
            Represents the values of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/>, and contains utilities for querying the values' type and getting and setting them.
            </summary>
            <seealso cref="T:Sirenix.OdinInspector.Editor.IPropertyValueEntry" />
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyValueEntry.ValueChangedDelegate">
            <summary>
            Delegate type used for the events <see cref="E:Sirenix.OdinInspector.Editor.PropertyValueEntry.OnValueChanged"/> and <see cref="E:Sirenix.OdinInspector.Editor.PropertyValueEntry.OnChildValueChanged"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ParentValueProperty">
             <summary>
             <para>The nearest parent property that has a value.
             That is, the property from which this value
             entry will fetch its parentvalues from in order
             to extract its own values.</para>
            
             <para>If <see cref="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ParentValueProperty"/> is null, this is a root property.</para>
             </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.IsBoxedValueType">
            <summary>
            Whether this value entry represents a boxed value type.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ValueCount">
            <summary>
            The number of parallel values this entry represents. This will always be exactly equal to the count of <see cref="P:Sirenix.OdinInspector.Editor.PropertyTree.WeakTargets" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.IsEditable">
            <summary>
            Whether this value entry is editable or not.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.TargetReferencePath">
            <summary>
            If this value entry has the override type <see cref="F:Sirenix.OdinInspector.Editor.PropertyValueState.Reference" />, this is the path of the property it references.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.SerializationBackend">
            <summary>
            <para>The actual serialization backend for this value entry, possibly inherited from the serialization backend of the root property this entry is a child of.</para>
            <para>Note that this is *not* always equal to <see cref="P:Sirenix.OdinInspector.Editor.InspectorPropertyInfo.SerializationBackend" />.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.Property">
            <summary>
            The property whose values this value entry represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ValueIsStrongList">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ValueIsWeakList">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.IList" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ValueIsValidDictionary">
            <summary>
            Whether the type of this entry implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ValueCategory">
            <summary>
            The value category of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.WeakValues">
            <summary>
            Provides access to the weakly typed values of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ValueChangedFromPrefab">
            <summary>
            Whether this value entry has been changed from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ListLengthChangedFromPrefab">
            <summary>
            Whether this value entry has had its list length changed from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.DictionaryChangedFromPrefab">
            <summary>
            Whether this value entry has had its dictionary values changes from its prefab counterpart.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.WeakSmartValue">
            <summary>
            <para>A weakly typed smart value that represents the first element of the value entry's value collection, but has "smart logic" for setting the value that detects relevant changes and applies them in parallel.</para>
            <para>This lets you often just use the smart value instead of having to deal with the tedium of multiple parallel values.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ParentType">
            <summary>
            The type from which this value entry comes. If this value entry represents a member value, this is the declaring type of the member. If the value entry represents a collection element, this is the type of the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.TypeOfValue">
            <summary>
            The most precise known contained type of the value entry. If polymorphism is in effect, this will be some type derived from <see cref="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.BaseValueType" />.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.BaseValueType">
            <summary>
            The base type of the value entry. If this is value entry represents a member value, this is the type of the member. If the value entry represents a collection element, this is the element type of the collection.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.ValueState">
            <summary>
            The special state of the value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.IsAlias">
            <summary>
            Whether this value entry is an alias, or not. Value entry aliases are used to provide strongly typed value entries in the case of polymorphism.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.Context">
            <summary>
            The context container of this property.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.IsMarkedAtomic">
            <summary>
            Whether this type is marked as an atomic type using a <see cref="T:Sirenix.OdinInspector.Editor.IAtomHandler"/>.
            </summary>
        </member>
        <member name="E:Sirenix.OdinInspector.Editor.PropertyValueEntry.OnValueChanged">
            <summary>
            An event that is invoked during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ApplyChanges" />, when any values have changed.
            </summary>
        </member>
        <member name="E:Sirenix.OdinInspector.Editor.PropertyValueEntry.OnChildValueChanged">
            <summary>
            An event that is invoked during <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ApplyChanges" />, when any child values have changed.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update">
            <summary>
            Updates the values contained in this value entry to the actual values in the target objects, and updates its state (override, type of value, etc.) accordingly.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ValueTypeValuesAreEqual(Sirenix.OdinInspector.Editor.IPropertyValueEntry)">
            <summary>
            <para>Checks whether the values in this value entry are equal to the values in another value entry.</para>
            <para>Note, both value entries must have the same value type, and must represent values that are .NET value types.</para>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ApplyChanges">
            <summary>
            Applies the changes made to this value entry to the target objects, and registers prefab modifications as necessary.
            </summary>
            <returns>
            True if any changes were made, otherwise, false.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.GetListValueEntryChanger">
            <summary>
            Gets a <see cref="T:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger" /> for this value entry, used to apply modifications to value entries representing a list.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.GetDictionaryHandler">
            <summary>
            Gets an <see cref="T:Sirenix.OdinInspector.Editor.IDictionaryHandler" /> for this value entry, used to apply modifications and get contextual data from value entries representing a dictionary.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.GetValueState">
            <summary>
            Determines the value state of this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.GetMostPreciseContainedType">
            <summary>
            Determines what the most precise contained type is on this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.UpdateValues">
            <summary>
            Updates all values in this value entry from the target tree values.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Initialize">
            <summary>
            Initializes this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ListIsReadOnly">
            <summary>
            Whether any of the list instances that this value entry represents are read only.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.CreateAlias(Sirenix.OdinInspector.Editor.PropertyValueEntry,System.Type)">
            <summary>
            Creates an alias value entry of a given type, for a given value entry. This is used to implement polymorphism in Odin.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Create(Sirenix.OdinInspector.Editor.InspectorProperty,System.Type)">
            <summary>
            Creates a value entry for a given property, of a given value type. Note that the created value entry is returned un-updated, and needs to have <see cref="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.Update"/> called on it before it can be used.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry.ValueIsPrefabDifferent(System.Object,System.Int32)">
            <summary>
            <para>Determines whether the value at the given selection index is different from the given prefab value, as is relevant for prefab modification checks.</para>
            <para>If the value is a reference type, null and type difference is checked. If value is a value type, a comparer from <see cref="M:Sirenix.Utilities.TypeExtensions.GetEqualityComparerDelegate``1" /> is used.</para>
            <para>This method is best ignored unless you know what you are doing.</para>
            </summary>
            <param name="value">The value to check differences against.</param>
            <param name="index">The selection index to compare against.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyValueEntry`1">
            <summary>
            Represents the values of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty" />, and contains utilities for querying the values' type and getting and setting them.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:Sirenix.OdinInspector.Editor.IPropertyValueEntry" />
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.EqualityComparer">
            <summary>
            An equality comparer for comparing values of type <see cref="!:TValue"/>. This is gotten using <see cref="M:Sirenix.Utilities.TypeExtensions.GetEqualityComparerDelegate``1"/>.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.ValueIsPrimitive">
            <summary>
            Whether <see cref="!:TValue"/>.is a primitive type; that is, the type is primitive, a string, or an enum.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.ValueIsValueType">
            <summary>
            Whether <see cref="!:TValue"/> is a value type.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.BaseValueIsWeakList">
            <summary>
            Whether <see cref="!:TValue"/> implements <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.BaseValueIsStrongList">
            <summary>
            Whether <see cref="!:TValue"/> implements <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.ValueIsUnityObject">
            <summary>
            Whether <see cref="P:Sirenix.OdinInspector.Editor.PropertyValueEntry.TypeOfValue"/> is derived from <see cref="T:UnityEngine.Object"/>.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.StrongListCountGetter">
            <summary>
            A delegate that gets the count of a strong list instance.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.StrongListIsReadOnlyGetter">
            <summary>
            A delegate that gets the count of a weak list instance.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry`1"/> class.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.WeakValues">
            <summary>
            Provides access to the weakly typed values of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.Values">
            <summary>
            Provides access to the strongly typed values of this value entry.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.IsMarkedAtomic">
            <summary>
            Whether this type is marked as an atomic type using a <see cref="T:Sirenix.OdinInspector.Editor.IAtomHandler"/>.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.WeakSmartValue">
            <summary>
            <para>A weakly typed smart value that represents the first element of the value entry's value collection, but has "smart logic" for setting the value that detects relevant changes and applies them in parallel.</para>
            <para>This lets you often just use the smart value instead of having to deal with the tedium of multiple parallel values.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.SmartValue">
            <summary>
            <para>A strongly typed smart value that represents the first element of the value entry's value collection, but has "smart logic" for setting the value that detects relevant changes and applies them in parallel.</para>
            <para>This lets you often just use the smart value instead of having to deal with the tedium of multiple parallel values.</para>
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.OriginalValuesArray">
            <summary>
            An array containing the original values as they were at the beginning of frame.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.InternalValuesArray">
            <summary>
            An array containing the current modified set of values.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.AtomValuesArray">
            <summary>
            An array containing the current modified set of atomic values.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.OriginalAtomValuesArray">
            <summary>
            An array containing the original set of atomic values.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.Initialize">
            <summary>
            Initializes this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.SetActualBoxedValueImplementation(System.Int32,System.Object)">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.SetActualValueImplementation(System.Int32,`0)">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.ListIsReadOnly">
            <summary>
            Whether any of the list instances that this value entry represents are read only.
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot call ListIsReadOnly on a property value entry that is not either a weak or a strong list.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.ValueTypeValuesAreEqual(Sirenix.OdinInspector.Editor.IPropertyValueEntry)">
            <summary>
            <para>Checks whether the values in this value entry are equal to the values in another value entry.</para>
            <para>Note, both value entries must have the same value type, and must represent values that are .NET value types.</para>
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.ValueIsPrefabDifferent(System.Object,System.Int32)">
            <summary>
            <para>Determines whether the value at the given selection index is different from the given prefab value, as is relevant for prefab modification checks.</para>
            <para>If the value is a reference type, null and type difference is checked. If value is a value type, a comparer from <see cref="M:Sirenix.Utilities.TypeExtensions.GetEqualityComparerDelegate``1" /> is used.</para>
            <para>This method is best ignored unless you know what you are doing.</para>
            </summary>
            <param name="value">The value to check differences against.</param>
            <param name="index">The selection index to compare against.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`1.ValueIsPrefabDifferent(`0,System.Int32)">
            <summary>
            <para>Determines whether the value at the given selection index is different from the given prefab value, as is relevant for prefab modification checks.</para>
            <para>If the value is a reference type, null and type difference is checked. If value is a value type, a comparer from <see cref="M:Sirenix.Utilities.TypeExtensions.GetEqualityComparerDelegate``1" /> is used.</para>
            <para>This method is best ignored unless you know what you are doing.</para>
            </summary>
            <param name="value">The value to check differences against.</param>
            <param name="index">The selection index to compare against.</param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyValueEntry`2">
            <summary>
            Represents the values of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty" />, and contains utilities for querying the values' type and getting and setting them.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:Sirenix.OdinInspector.Editor.IPropertyValueEntry" />
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyValueEntry`2"/> class.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.ParentType">
            <summary>
            The type from which this value entry comes. If this value entry represents a member value, this is the declaring type of the member. If the value entry represents a collection element, this is the type of the collection.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.GetListValueEntryChanger">
            <summary>
            Gets a <see cref="T:Sirenix.OdinInspector.Editor.PropertyListValueEntryChanger" /> for this value entry, used to apply modifications to value entries representing a list.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.GetDictionaryHandler">
            <summary>
            Gets an <see cref="T:Sirenix.OdinInspector.Editor.IDictionaryHandler" /> for this value entry, used to apply modifications and get contextual data from value entries representing a dictionary.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.GetMostPreciseContainedType">
            <summary>
            Determines what the most precise contained type is on this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.Initialize">
            <summary>
            Initializes this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.UpdateValues">
            <summary>
            Updates all values in this value entry from the target tree values.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.GetValueState">
            <summary>
            Determines the value state of this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.ApplyChanges">
            <summary>
            Applies the changes made to this value entry to the target objects, and registers prefab modifications as necessary.
            </summary>
            <returns>
            True if any changes were made, otherwise, false.
            </returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.GetActualBoxedValue(`0)">
            <summary>
            Gets the actual boxed value of the tree target.
            </summary>
            <param name="parent">The parent.</param>
            <returns></returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.GetActualValue(`0)">
            <summary>
            Gets the actual value of the tree target.
            </summary>
            <param name="parent">The parent.</param>
            <returns></returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyValueEntry`2.GetParent(System.Int32)">
            <summary>
            Gets the parent value at the given index.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyWeakListElementValueEntry`2">
            <summary>
            Represents the values of an <see cref="T:Sirenix.OdinInspector.Editor.InspectorProperty"/> for a weak list element, and contains utilities for querying the values' type and getting and setting them.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyWeakListElementValueEntry`2.ValueCategory">
            <summary>
            The value category of this value entry.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyWeakListElementValueEntry`2.GetActualBoxedValue(`0)">
            <summary>
            Gets the actual boxed value of the tree target.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyWeakListElementValueEntry`2.GetActualValue(`0)">
            <summary>
            Gets the actual value of the tree target.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyWeakListElementValueEntry`2.SetActualBoxedValueImplementation(System.Int32,System.Object)">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyWeakListElementValueEntry`2.SetActualValueImplementation(System.Int32,`1)">
            <summary>
            Sets the actual target tree value.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PropertyWeakListValueEntryChanger`1">
            <summary>
            Provides functionality for applying list modifications to value entries representing weak lists.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyWeakListValueEntryChanger`1.#ctor(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.PropertyWeakListValueEntryChanger`1"/> class.
            </summary>
            <param name="entry">The entry to represent.</param>
            <exception cref="T:System.ArgumentNullException">entry is null</exception>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyWeakListValueEntryChanger`1.ElementType">
            <summary>
            The element type of the lists that this changer represents.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PropertyWeakListValueEntryChanger`1.Entry">
            <summary>
            The value entry that this changer is associated with.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyWeakListValueEntryChanger`1.AddListElementImplementation(System.Object[])">
            <summary>
            Implementation of the add list element change.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyWeakListValueEntryChanger`1.ClearListImplementation">
            <summary>
            Implementation of the clear list change.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyWeakListValueEntryChanger`1.InsertListElementAtImplementation(System.Int32,System.Object[])">
            <summary>
            Implementation of the insert list element change.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PropertyWeakListValueEntryChanger`1.RemoveListElementAtImplementation(System.Int32)">
            <summary>
            Implementation of the remove list element change.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.OdinInspectorAboutWindow">
            <summary>
            Adds menu items to the Unity Editor, draws the About window, and the preference window found under Edit > Preferences > Odin Inspector.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.SerializedPropertyUtilities">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.SerializedPropertyUtilities.GetProperTypeName(UnityEditor.SerializedProperty)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.SerializedPropertyUtilities.IsCompatibleWithType(UnityEditor.SerializedProperty,System.Type)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.SerializedPropertyUtilities.GuessContainedType(UnityEditor.SerializedProperty)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.SerializedPropertyUtilities.CanSetGetValue(System.Type)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.SerializedPropertyUtilities.GetValueGetter``1">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.SerializedPropertyUtilities.GetValueSetter``1">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.SirenixPreferencesWindow">
            <summary>
            Sirenix preferences window.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.SirenixPreferencesWindow.OpenGlobalConfigWindow``1(System.String,UnityEngine.Object)">
            <summary>
            Open preferences page for configuration object.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.SirenixPreferencesWindow.OpenSirenixPreferences">
            <summary>
            Opens the Odin inspector preferences window.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.StringMemberHelper">
            <summary>
            Helper class to handle strings for labels and other similar purposes.
            Allows for a static string, or for refering to string member fields, properties or methods,
            by name, if the first character is a '$'.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.StringMemberHelper.ErrorMessage">
            <summary>
            If any error occurred while looking for members, it will be stored here.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.StringMemberHelper.#ctor(System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a StringMemberHelper to get a display string.
            </summary>
            <param name="parentType">The type of the parent, to get a member string from.</param>
            <param name="path">The input string. If the first character is a '$', then StringMemberHelper will look for a member string field, property or method.</param>
            <param name="allowInstanceMember">If <c>true</c>, then StringMemberHelper will look for instance members.</param>
            <param name="allowStaticMember">If <c>true</c>, then StringMemberHelper will look for static members.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.StringMemberHelper.#ctor(System.Type,System.String,System.String@,System.Boolean,System.Boolean)">
            <summary>
            Creates a StringMemberHelper to get a display string.
            </summary>
            <param name="parentType">The type of the parent, to get a member string from.</param>
            <param name="path">The input string. If the first character is a '$', then StringMemberHelper will look for a member string field, property or method.</param>
            <param name="errorMessage">Error message buffer. If the string is not equal to <c>null</c>, the StringMemberHelper will not run.</param>
            <param name="allowInstanceMember">If <c>true</c>, then StringMemberHelper will look for instance members.</param>
            <param name="allowStaticMember">If <c>true</c>, then StringMemberHelper will look for static members.</param>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.StringMemberHelper.IsDynamicString">
            <summary>
            Gets a value indicating whether or not the string is retrived from a from a member. 
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.StringMemberHelper.GetString(Sirenix.OdinInspector.Editor.IPropertyValueEntry)">
            <summary>
            Gets the string from the StringMemberHelper.
            Only updates the string buffer in Layout events.
            </summary>
            <param name="entry">The property entry, to get the instance reference from.</param>
            <returns>The current display string.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.StringMemberHelper.GetString(Sirenix.OdinInspector.Editor.InspectorProperty)">
            <summary>
            Gets the string from the StringMemberHelper.
            Only updates the string buffer in Layout events.
            </summary>
            <param name="property">The property, to get the instance reference from.</param>
            <returns>The current string.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.StringMemberHelper.GetString(System.Object)">
            <summary>
            Gets the string from the StringMemberHelper.
            Only updates the string buffer in Layout events.
            </summary>
            <param name="instance">The instance, for evt. member references.</param>
            <returns>The current string.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.StringMemberHelper.ForceGetString(System.Object)">
            <summary>
            Gets the string from the StringMemberHelper.
            </summary>
            <param name="instance">The instance, for evt. member references.</param>
            <returns>The current string.</returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.UniqueDrawerKey">
            <summary>
            Gets a unique key for any given property within a drawer.
            </summary>
            <example>
            <code>
            [OdinDrawer]
            public class MyCustomTypeDrawer&lt;T&gt; : OdinValueDrawer&lt;T&gt; where T : MyCustomBaseType
            {
                protected override void DrawPropertyLayout(IPropertyValueEntry&lt;T&gt; entry, GUIContent label)
                {
                    var isToggled = entry.Context(this, "toggled", false);
                    isToggled.Value = SirenixEditorGUI.Label(isToggled.Value, label);
                    if (SirenixEditorGUI.BeginFadeGroup(UniqueDrawerKey.Create(entry, this), isToggled.Value))
                    {
                        EditorGUI.indentLevel++;
                        this.CallNextDrawer(entry.Property, null);
                        EditorGUI.indentLevel--;
                    }
                    SirenixEditorGUI.EndFadeGroup();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UniqueDrawerKey.Create(Sirenix.OdinInspector.Editor.IPropertyValueEntry,Sirenix.OdinInspector.Editor.OdinDrawer)">
            <summary>
            Gets a unique key for any given property within a drawer.
            </summary>
            <param name="entry">The property entry.</param>
            <param name="drawer">The drawer.</param>
            <returns></returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UniqueDrawerKey.Create(Sirenix.OdinInspector.Editor.InspectorProperty,Sirenix.OdinInspector.Editor.OdinDrawer)">
            <summary>
            Gets a unique key for any given property within a drawer.
            </summary>
            <param name="property">The property.</param>
            <param name="drawer">The drawer.</param>
            <returns></returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UniqueDrawerKey.Equals(Sirenix.OdinInspector.Editor.UniqueDrawerKey)">
            <summary>
            Checks if two keys are identical.
            </summary>
            <param name="other">The other key.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UniqueDrawerKey.Equals(System.Object)">
            <summary>
            Checks if two keys are identical.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UniqueDrawerKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.UnityPropertyDrawer`2">
            <summary>
            Unity property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyDrawer`2.#ctor">
            <summary>
            Initializes the property drawer.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyDrawer`2.DrawPropertyLayout(Sirenix.OdinInspector.Editor.IPropertyValueEntry{`1},UnityEngine.GUIContent)">
            <summary>
            Draws the property.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.UnityPropertyEmitter">
            <summary>
            Provides utilities for emitting ScriptableObject and MonoBehaviour-derived types with specific property names and types, and providing instances of <see cref="T:UnityEditor.SerializedProperty"/> with those names and types.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.UnityPropertyEmitter.Handle">
            <summary>
            A handle for a set of emitted Unity objects. When disposed (or collected by the GC) this handle will queue the emitted object instances for destruction.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.UnityPropertyEmitter.Handle.UnityProperty">
            <summary>
            The unity property to represent.
            </summary>
        </member>
        <member name="F:Sirenix.OdinInspector.Editor.UnityPropertyEmitter.Handle.Objects">
            <summary>
            The Unity objects to represent.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyEmitter.Handle.#ctor(UnityEditor.SerializedProperty,UnityEngine.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.OdinInspector.Editor.UnityPropertyEmitter.Handle"/> class.
            </summary>
            <param name="unityProperty">The unity property to represent.</param>
            <param name="objects">The objects to represent.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyEmitter.Handle.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Sirenix.OdinInspector.Editor.UnityPropertyEmitter.Handle"/> class.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyEmitter.CreateEmittedMonoBehaviourProperty(System.String,System.Type,System.Int32,UnityEngine.GameObject@)">
            <summary>
            Creates an emitted MonoBehaviour-based <see cref="T:UnityEditor.SerializedProperty"/>.
            </summary>
            <param name="fieldName">Name of the field to emit.</param>
            <param name="valueType">Type of the value to create a property for.</param>
            <param name="targetCount">The target count of the tree to create a property for.</param>
            <param name="gameObject">The game object that the MonoBehaviour of the property is located on.</param>
            <exception cref="T:System.ArgumentNullException">
            fieldName is null
            or
            valueType is null
            </exception>
            <exception cref="T:System.ArgumentException">Target count must be equal to or higher than 1.</exception>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.UnityPropertyEmitter.CreateEmittedScriptableObjectProperty(System.String,System.Type,System.Int32)">
            <summary>
            Creates an emitted ScriptableObject-based <see cref="T:UnityEditor.SerializedProperty"/>.
            </summary>
            <param name="fieldName">Name of the field to emit.</param>
            <param name="valueType">Type of the value to create a property for.</param>
            <param name="targetCount">The target count of the tree to create a property for.</param>
            <exception cref="T:System.ArgumentNullException">
            fieldName is null
            or
            valueType is null
            </exception>
            <exception cref="T:System.ArgumentException">Target count must be equal to or higher than 1.</exception>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.OdinSceneValidatorWindow">
            <summary>
            The Odin Scene Validator window.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.OdinSceneValidatorWindow.OpenWindow">
            <summary>
            Opens the window.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.GlobalPersistentContext">
            <summary>
            Context that persists across reloading and restarting Unity.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GlobalPersistentContext.TimeStamp">
            <summary>
            Time stamp for when the persistent context value was last used.
            Used for purging unused context.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.GlobalPersistentContext.#ctor">
            <summary>
            Instatiates a persistent context.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.GlobalPersistentContext.UpdateTimeStamp">
            <summary>
            Updates the time stamp to now.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.GlobalPersistentContext`1">
            <summary>
            Context that persists across reloading and restarting Unity.
            </summary>
            <typeparam name="T">The type of the context value.</typeparam>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.GlobalPersistentContext`1.Value">
            <summary>
            The value of the context.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.GlobalPersistentContext`1.Create">
            <summary>
            Creates a new persistent context object.
            </summary>
            <typeparam name="T">The type of the context value.</typeparam>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.GlobalPersistentContext`1.ToString">
            <summary>
            Formats a string with the time stamp, and the value.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.LocalPersistentContext`1">
            <summary>
            Helper class that provides a local copy of a <see cref="T:Sirenix.OdinInspector.Editor.GlobalPersistentContext`1"/>.
            When the local value is changed, it also changed the global value, but the global value does not change the local value.
            </summary>
            <typeparam name="T">The type of the context value.</typeparam>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.LocalPersistentContext`1.Value">
            <summary>
            The value of the context.
            Changing this value, also changes the global context value, but the global value does not change the local value.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.LocalPersistentContext`1.Create(Sirenix.OdinInspector.Editor.GlobalPersistentContext{`0})">
            <summary>
            Creates a local context object for the provided global context.
            </summary>
            <param name="global">The global context object.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.LocalPersistentContext`1.UpdateLocalValue">
            <summary>
            Updates the local value to the current global value.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PersistentContext">
            <summary>
            Provides context objects that still persist when Unity reloads or is restartet.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PersistentContext.Get``2(``0,``1)">
            <summary>
            Gets a GlobalPersistentContext object for the specified key.
            </summary>
            <typeparam name="TKey1">The type of the first key.</typeparam>
            <typeparam name="TValue">The type of the value stored in the context object.</typeparam>
            <param name="alphaKey">The first key.</param>
            <param name="defaultValue">The default value, used for when the context object is first created.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PersistentContext.Get``3(``0,``1,``2)">
            <summary>
            Gets a GlobalPersistentContext object for the specified keys.
            </summary>
            <typeparam name="TKey1">The type of the first key.</typeparam>
            <typeparam name="TKey2">The type of the second key.</typeparam>
            <typeparam name="TValue">The type of the value stored in the context object.</typeparam>
            <param name="alphaKey">The first key.</param>
            <param name="betaKey">The second key.</param>
            <param name="defaultValue">The default value, used for when the context object is first created.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PersistentContext.Get``4(``0,``1,``2,``3)">
            <summary>
            Gets a GlobalPersistentContext object for the specified keys.
            </summary>
            <typeparam name="TKey1">The type of the first key.</typeparam>
            <typeparam name="TKey2">The type of the second key.</typeparam>
            <typeparam name="TKey3">The type of the third key.</typeparam>
            <typeparam name="TValue">The type of the value stored in the context object.</typeparam>
            <param name="alphaKey">The first key.</param>
            <param name="betaKey">The second key.</param>
            <param name="gammaKey">The third key.</param>
            <param name="defaultValue">The default value, used for when the context object is first created.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PersistentContext.Get``5(``0,``1,``2,``3,``4)">
            <summary>
            Gets a GlobalPersistentContext object for the specified keys.
            </summary>
            <typeparam name="TKey1">The type of the first key.</typeparam>
            <typeparam name="TKey2">The type of the second key.</typeparam>
            <typeparam name="TKey3">The type of the third key.</typeparam>
            <typeparam name="TKey4">The type of the fourth key.</typeparam>
            <typeparam name="TValue">The type of the value stored in the context object.</typeparam>
            <param name="alphaKey">The first key.</param>
            <param name="betaKey">The second key.</param>
            <param name="gammaKey">The third key.</param>
            <param name="deltaKey">The fourth key.</param>
            <param name="defaultValue">The default value, used for when the context object is first created.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PersistentContext.Get``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Gets a GlobalPersistentContext object for the specified keys.
            </summary>
            <typeparam name="TKey1">The type of the first key.</typeparam>
            <typeparam name="TKey2">The type of the second key.</typeparam>
            <typeparam name="TKey3">The type of the third key.</typeparam>
            <typeparam name="TKey4">The type of the fourth key.</typeparam>
            <typeparam name="TKey5">The type of the fifth key.</typeparam>
            <typeparam name="TValue">The type of the value stored in the context object.</typeparam>
            <param name="alphaKey">The first key.</param>
            <param name="betaKey">The second key.</param>
            <param name="gammaKey">The third key.</param>
            <param name="deltaKey">The fourth key.</param>
            <param name="epsilonKey">The fifth key.</param>
            <param name="defaultValue">The default value, used for when the context object is first created.</param>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PersistentContext.Get``2(``0,Sirenix.OdinInspector.Editor.GlobalPersistentContext{``1}@)">
            <summary>
            Gets a GlobalPersistentContext object for the specified key.
            Returns <c>true</c> when the context is first created. Otherwise <c>false</c>.
            </summary>
            <typeparam name="TKey1">The type of the first key.</typeparam>
            <typeparam name="TValue">The type of the value stored in the context object.</typeparam>
            <param name="alphaKey">The first key.</param>
            <param name="context">The persistent context object.</param>
            <returns>Returns <c>true</c> when the context is first created. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PersistentContext.Get``3(``0,``1,Sirenix.OdinInspector.Editor.GlobalPersistentContext{``2}@)">
            <summary>
            Gets a GlobalPersistentContext object for the specified keys.
            Returns <c>true</c> when the context is first created. Otherwise <c>false</c>.
            </summary>
            <typeparam name="TKey1">The type of the first key.</typeparam>
            <typeparam name="TKey2">The type of the second key.</typeparam>
            <typeparam name="TValue">The type of the value stored in the context object.</typeparam>
            <param name="alphaKey">The first key.</param>
            <param name="betaKey">The second key.</param>
            <param name="context">The persistent context object.</param>
            <returns>Returns <c>true</c> when the context is first created. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PersistentContext.Get``4(``0,``1,``2,Sirenix.OdinInspector.Editor.GlobalPersistentContext{``3}@)">
            <summary>
            Gets a GlobalPersistentContext object for the specified keys.
            Returns <c>true</c> when the context is first created. Otherwise <c>false</c>.
            </summary>
            <typeparam name="TKey1">The type of the first key.</typeparam>
            <typeparam name="TKey2">The type of the second key.</typeparam>
            <typeparam name="TKey3">The type of the third key.</typeparam>
            <typeparam name="TValue">The type of the value stored in the context object.</typeparam>
            <param name="alphaKey">The first key.</param>
            <param name="betaKey">The second key.</param>
            <param name="gammaKey">The third key.</param>
            <param name="context">The persistent context object.</param>
            <returns>Returns <c>true</c> when the context is first created. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PersistentContext.Get``5(``0,``1,``2,``3,Sirenix.OdinInspector.Editor.GlobalPersistentContext{``4}@)">
            <summary>
            Gets a GlobalPersistentContext object for the specified keys.
            Returns <c>true</c> when the context is first created. Otherwise <c>false</c>.
            </summary>
            <typeparam name="TKey1">The type of the first key.</typeparam>
            <typeparam name="TKey2">The type of the second key.</typeparam>
            <typeparam name="TKey3">The type of the third key.</typeparam>
            <typeparam name="TKey4">The type of the fourth key.</typeparam>
            <typeparam name="TValue">The type of the value stored in the context object.</typeparam>
            <param name="alphaKey">The first key.</param>
            <param name="betaKey">The second key.</param>
            <param name="gammaKey">The third key.</param>
            <param name="deltaKey">The fourth key.</param>
            <param name="context">The persistent context object.</param>
            <returns>Returns <c>true</c> when the context is first created. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PersistentContext.Get``6(``0,``1,``2,``3,``4,Sirenix.OdinInspector.Editor.GlobalPersistentContext{``5}@)">
            <summary>
            Gets a GlobalPersistentContext object for the specified keys.
            Returns <c>true</c> when the context is first created. Otherwise <c>false</c>.
            </summary>
            <typeparam name="TKey1">The type of the first key.</typeparam>
            <typeparam name="TKey2">The type of the second key.</typeparam>
            <typeparam name="TKey3">The type of the third key.</typeparam>
            <typeparam name="TKey4">The type of the fourth key.</typeparam>
            <typeparam name="TKey5">The type of the fifth key.</typeparam>
            <typeparam name="TValue">The type of the value stored in the context object.</typeparam>
            <param name="alphaKey">The first key.</param>
            <param name="betaKey">The second key.</param>
            <param name="gammaKey">The third key.</param>
            <param name="deltaKey">The fourth key.</param>
            <param name="epsilonKey">The fifth key.</param>
            <param name="context">The persistent context object.</param>
            <returns>Returns <c>true</c> when the context is first created. Otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Sirenix.OdinInspector.Editor.PersistentContextCache">
            <summary>
            Persistent Context cache object.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PersistentContextCache.EnableCaching">
            <summary>
            If <c>true</c> then persistent context is disabled entirely.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PersistentContextCache.WriteToFile">
            <summary>
            If <c>true</c> the context will be saved to a file in the temp directory.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PersistentContextCache.MaxCacheByteSize">
            <summary>
            The max size of the cache in bytes.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PersistentContextCache.CacheSize">
            <summary>
            Estimated cache size in bytes.
            </summary>
        </member>
        <member name="P:Sirenix.OdinInspector.Editor.PersistentContextCache.EntryCount">
            <summary>
            The current number of context entries in the cache.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.Editor.PersistentContextCache.DeleteCache">
            <summary>
            Delete the persistent cache file.
            </summary>
        </member>
    </members>
</doc>
